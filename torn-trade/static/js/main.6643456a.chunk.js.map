{"version":3,"sources":["actions/MarketItemsFetchAction.js","utils/ConsoleUtil.js","actions/MarketPriceFetchAction.js","actions/ProfileDetailsFetchAction.js","utils/IdGeneratorUtil.js","utils/PriceCalculatorUtil.js","helpers/ItemsComponentHelper.js","components/InitialiserComponent.js","utils/ItemRowUtil.js","components/ReceivedItemsComponent.js","components/SentItemsComponent.js","components/SummaryDetailComponent.js","components/FooterComponent.js","App.js","utils/PriceMapGeneratorUtil.js","serviceWorker.js","index.js"],"names":["success","itemsStore","itemNameList","type","payload","loading","started","failed","error","debugConsole","msg","localStorage","getItem","console","log","fetchPrice","apiKey","itemName","componentContext","forceApiCall","updatesCallback","dispatch","itemId","idByName","itemPriceUrl","bazaarPriceUrl","cachedBestPriceForItem","props","priceMap","itemPricePromise","axios","get","bazaarPricePromise","Promise","all","then","responses","itemMarketListings","data","itemmarket","privateBazaarListings","bazaar","bestItemMarketPrice","bestPrivateBazaarPrice","length","cost","pushPriceAndRowDetailsInReduxStore","catch","errs","JSON","stringify","forEach","err","bestPriceAvailable","yourName","IdGenerator","crypto","toString","getUpdatedRowData","rows","itemNamesList","map","row","includes","name","mPrice","tPrice","qty","getTotalPrice","totalPrice","updateTypeAheadSelectedName","selectedItemName","rowId","state","id","updateReceivedItemsData","triggerReceivedItemsDataUpdates","updateSentItemsData","triggerSentItemsDataUpdates","updatedTotal","updatedRows","updateLocalState","pushSentItemDetails","pushTradeSummary","received","total","pushReceivedItemsDetail","sent","setState","InitialiserComponent","REFRESH_INTERVAL","updateApiKey","event","target","value","updateApiKeyInReduxStore","saveApiKeyAndInit","updateMarketItemDetailsInReduxStore","updateUserNameInReduxStore","refreshPrices","isRefreshing","count","Object","keys","setTimeout","refreshPrice","currentItemNameForPriceRefresh","this","refreshItemPriceInReduxStore","btnName","btnColor","Container","Row","Col","Input","placeholder","onChange","Button","color","onClick","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Component","connect","reduxState","setItem","res","nameById","entries","items","key","parseInt","toLowerCase","push","message","fetchAllItemMetaData","fetchUserName","contexts","receivedItemComponentContext","sentItemComponentContext","areRowsEmpty","isEmpty","isCurrentRowEmpty","refinedOptions","filter","item","itemAlreadySelected","sentAndReceivedItemsEmpty","isItemListNotInitialised","itemsNameList","ReceivedItemsComponent","forceRecalculation","updateContextInReduxStore","Table","index","maxResults","disabled","selected","options","fieldName","split","forceUpdate","updateQtyInReceivedItems","min","ButtonGroup","currentRow","calculatedBalance","summary","balance","SentItemsComponent","updateQtyInSentItems","SummaryDetailComponent","toggleSummaryDialog","isSummaryDialogOpen","copySummaryDataToClipboard","context","textToCopy","document","getElementById","innerText","clipboard","showCopiedButtonName","window","tradeSummary","balanceText","balanceColor","style","toggle","summaryDetailComponentContext","FooterComponent","href","App","populateDefaultPriceMap","itemNames","parse","defaultPriceMap","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reduxStore","mainReducer","time","Date","theirName","apiErrorMsg","apiCallSuccess","undefined","action","updatedPriceMap","price","createStore","applyMiddleware","thunk","logger","ReactApp","store","ReactDOM","render","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6643456a.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const fetchAllItemMetaData = (apiKey) => {\r\n  localStorage.setItem(\"API_KEY\",apiKey);\r\n  return dispatch => {\r\n    dispatch(started());\r\n    axios.get(\"https://api.torn.com/torn/?selections=items&key=\" + apiKey)\r\n      .then(res => {\r\n        var itemNameList = [];\r\n        var itemsStore = {\r\n          idByName: {},\r\n          nameById: {}\r\n        };\r\n        Object.entries(res.data.items).forEach(([key, value]) => {\r\n          var itemId = parseInt(key);\r\n          var itemName = value.name;\r\n          var isIllegalItemName=itemName.toLowerCase().includes(\"undefined\");\r\n          if(!isIllegalItemName){\r\n            itemsStore.idByName[itemName] = itemId;\r\n            itemsStore.nameById[itemId] = itemName;\r\n            itemNameList.push(itemName);\r\n          }\r\n        });\r\n        localStorage.setItem(\"MARKET_ITEMS\", JSON.stringify(itemsStore))\r\n        localStorage.setItem(\"MARKET_ITEMS_SIMPLE\", JSON.stringify(itemNameList))\r\n        dispatch(success(itemsStore, itemNameList));\r\n      })\r\n      .catch(err => {\r\n        dispatch(failed(err.message));\r\n      });\r\n  };\r\n};\r\n\r\nconst success = (itemsStore, itemNameList) => ({\r\n  type: \"MARKET_ITEMS_FETCH_SUCCESS\",\r\n  payload: {\r\n    loading: false,\r\n    itemsStore: { ...itemsStore },\r\n    itemNameList: [...itemNameList]\r\n  }\r\n});\r\n\r\nconst started = () => ({\r\n  type: \"MARKET_ITEMS_FETCH_STARTED\",\r\n  payload: {\r\n    loading: true\r\n  }\r\n});\r\n\r\nconst failed = (error) => ({\r\n  type: \"API_CALL_FAILED\",\r\n  payload: {\r\n    error,\r\n    loading: false\r\n  }\r\n});","export function debugConsole(msg){\r\n    if(localStorage.getItem(\"debug\")){\r\n        console.log(msg);\r\n    }\r\n}\r\n\r\nexport default debugConsole;","import axios from 'axios';\r\nimport debugConsole from '../utils/ConsoleUtil'\r\n\r\nexport const fetchPrice = (apiKey, itemName, itemsStore, componentContext, forceApiCall, updatesCallback) => {\r\n  return (dispatch) => {\r\n    var itemId = itemsStore.idByName[itemName];\r\n    var itemPriceUrl = \"https://api.torn.com/market/\" + itemId + \"?selections=itemmarket&key=\" + apiKey;\r\n    var bazaarPriceUrl = \"https://api.torn.com/market/\" + itemId + \"?selections=bazaar&key=\" + apiKey;\r\n    var cachedBestPriceForItem = componentContext.props.priceMap[itemName];\r\n    if (cachedBestPriceForItem === 0 || forceApiCall) {\r\n      debugConsole(\"prices to be fetched from the API\");\r\n      var itemPricePromise = axios.get(itemPriceUrl);\r\n      var bazaarPricePromise = axios.get(bazaarPriceUrl);\r\n      Promise.all([itemPricePromise, bazaarPricePromise]).then((responses) => {\r\n        var itemMarketListings = responses[0].data.itemmarket;\r\n        var privateBazaarListings = responses[1].data.bazaar;\r\n        var bestPriceAvailable = 0;\r\n        var bestItemMarketPrice = 0;\r\n        var bestPrivateBazaarPrice = 0;\r\n        if (itemMarketListings !== null && itemMarketListings.length > 0 && itemMarketListings[0].cost !== null) {\r\n          bestItemMarketPrice = itemMarketListings[0].cost;\r\n        }\r\n        if (privateBazaarListings !== null && privateBazaarListings.length > 0 && privateBazaarListings[0].cost !== null) {\r\n          bestPrivateBazaarPrice = privateBazaarListings[0].cost;\r\n        }\r\n\r\n        //best price out of bazaar & market\r\n        bestPriceAvailable = bestPrivateBazaarPrice < bestItemMarketPrice ? bestPrivateBazaarPrice : bestItemMarketPrice;\r\n\r\n        pushPriceAndRowDetailsInReduxStore(itemName, bestPriceAvailable, dispatch, updatesCallback);\r\n\r\n      }).catch((errs) => {\r\n        console.error(JSON.stringify(errs));\r\n        errs.forEach(err => {\r\n          dispatch(failed(err));\r\n        });\r\n      });\r\n    }\r\n    else {\r\n      debugConsole(\"price for \" + itemName + \" is already fetched, value = \" + cachedBestPriceForItem);\r\n      pushPriceAndRowDetailsInReduxStore(itemName, cachedBestPriceForItem, dispatch, updatesCallback);\r\n    }\r\n  };\r\n};\r\n\r\nconst failed = (error) => ({\r\n  type: \"API_CALL_FAILED\",\r\n  payload: {\r\n    error,\r\n    loading: false\r\n  }\r\n});\r\n\r\nfunction pushPriceAndRowDetailsInReduxStore(itemName, bestPriceAvailable, dispatch, updatesCallback) {\r\n  dispatch({ type: 'MARKET_PRICE_FETCHED', payload: { \"price\": bestPriceAvailable, \"itemName\": itemName } });\r\n  //execute the updates after the price has been fetched\r\n  updatesCallback();\r\n}","import axios from 'axios';\r\n\r\nexport const fetchUserName = (apiKey) => {\r\n  return dispatch => {\r\n    axios.get(\"https://api.torn.com/user/?selections=profile&key=\"+apiKey)\r\n      .then(res => {\r\n        var yourName=res.data.name;\r\n        localStorage.setItem(\"YOUR_NAME\",yourName);\r\n        dispatch(success(yourName));\r\n      })\r\n      .catch(err => {\r\n        dispatch(failed(err.message));\r\n      });\r\n  };\r\n};\r\n\r\nconst success = (yourName) => ({\r\n  type: \"YOUR_NAME_UPDATED\",\r\n  payload: {\r\n    loading: false,\r\n    yourName\r\n  }\r\n});\r\n\r\nconst failed = (error) => ({\r\n  type: \"API_CALL_FAILED\",\r\n  payload: {\r\n    error,\r\n    loading: false\r\n  }\r\n});","import * as crypto from \"crypto\";\r\n\r\nexport function IdGenerator(){\r\n    return crypto.randomBytes(16).toString(\"base64\")\r\n}","export function getUpdatedRowData(rows,itemNamesList,priceMap){\r\n    return rows.map((row)=>{\r\n        if(itemNamesList.includes(row.name)){\r\n            //update mPrice\r\n            row.mPrice=priceMap[row.name];\r\n            //update tPrice\r\n            row.tPrice=row.qty*row.mPrice;\r\n        }\r\n        return {...row};\r\n    });\r\n}\r\n\r\nexport function getTotalPrice(rows,itemNamesList,priceMap){\r\n    var totalPrice=0;\r\n    rows.forEach((row)=>{\r\n        if(itemNamesList.includes(row.name)){\r\n            totalPrice+=priceMap[row.name]*row.qty;\r\n        }\r\n    });\r\n    return totalPrice;\r\n}","import { IdGenerator } from '../utils/IdGeneratorUtil'\r\nimport { getUpdatedRowData, getTotalPrice } from '../utils/PriceCalculatorUtil'\r\n\r\n/* methods common for both SentItemsComponent & ReceivedItemsComponent */\r\n\r\nexport function updateTypeAheadSelectedName(selectedItemName, rowId, componentContext) {\r\n    var itemName = selectedItemName[0];\r\n    componentContext.state.rows.forEach((row) => {\r\n        if (row.id === rowId) {\r\n            row.name = itemName;\r\n            row.mPrice = 0;\r\n            row.tPrice = 0;\r\n        }\r\n    });\r\n\r\n    if (componentContext.state.type === \"RECEIVED\") {\r\n        componentContext.props.updateReceivedItemsData(\r\n            componentContext.props.apiKey,\r\n            itemName,\r\n            componentContext.props.itemsStore,\r\n            componentContext,\r\n            //chance to update things once the asyc method 'updateReceivedItemsData' has finished\r\n            () => {\r\n                triggerReceivedItemsDataUpdates(componentContext);\r\n            });\r\n    }\r\n    if (componentContext.state.type === \"SENT\") {\r\n        componentContext.props.updateSentItemsData(\r\n            componentContext.props.apiKey,\r\n            itemName,\r\n            componentContext.props.itemsStore,\r\n            componentContext,\r\n            //chance to update things once the asyc method 'updateReceivedItemsData' has finished\r\n            () => {\r\n                triggerSentItemsDataUpdates(componentContext);\r\n            });\r\n    }\r\n\r\n}\r\n\r\n/* methods exclusive to ReceivedItemsComponent */\r\n\r\nexport function addRowInReceivedItems(componentContext) {\r\n    componentContext.state.rows.push({\r\n        id: IdGenerator(),\r\n        name: \"\",\r\n        qty: 0,\r\n        mPrice: 0,\r\n        tPrice: 0\r\n    })\r\n    componentContext.forceUpdate();\r\n    triggerReceivedItemsDataUpdates(componentContext);\r\n}\r\n\r\nexport function removeRowFromReceivedItems(currentRow, componentContext) {\r\n    componentContext.state.rows = componentContext.state.rows.filter((row) => {\r\n        return row.id !== currentRow.id;\r\n    });\r\n    componentContext.forceUpdate();\r\n    triggerReceivedItemsDataUpdates(componentContext);\r\n}\r\n\r\nexport function updateQtyInReceivedItems(event, componentContext) {\r\n    var fieldName = event.target.name.split(\"_\")[0];\r\n    var rowId = event.target.name.split(\"_\")[1];\r\n    var value = event.target.value;\r\n    componentContext.state.rows.forEach((row) => {\r\n        if (row.id === rowId) {\r\n            row[fieldName] = value;\r\n        }\r\n    });\r\n    componentContext.forceUpdate();\r\n    triggerReceivedItemsDataUpdates(componentContext);\r\n}\r\n\r\n/* methods exclusive to SentItemsComponent */\r\n\r\nexport function addRowInSentItems(componentContext) {\r\n    componentContext.state.rows.push({\r\n        id: IdGenerator(),\r\n        name: \"\",\r\n        qty: 0,\r\n        mPrice: 0,\r\n        tPrice: 0\r\n    });\r\n    componentContext.forceUpdate();\r\n    triggerSentItemsDataUpdates(componentContext);\r\n}\r\n\r\nexport function removeRowFromSentItems(currentRow, componentContext) {\r\n    componentContext.state.rows = componentContext.state.rows.filter((row) => {\r\n        return row.id !== currentRow.id;\r\n    });\r\n    componentContext.forceUpdate();\r\n    triggerSentItemsDataUpdates(componentContext);\r\n}\r\n\r\nexport function updateQtyInSentItems(event, componentContext) {\r\n    var fieldName = event.target.name.split(\"_\")[0];\r\n    var rowId = event.target.name.split(\"_\")[1];\r\n    var value = event.target.value;\r\n    componentContext.state.rows.forEach((row) => {\r\n        if (row.id === rowId) {\r\n            row[fieldName] = value;\r\n        }\r\n    });\r\n    componentContext.forceUpdate();\r\n    triggerSentItemsDataUpdates(componentContext);\r\n}\r\n\r\n//updates\r\nexport function triggerSentItemsDataUpdates(componentContext) {\r\n    var updatedTotal = getTotalPrice(\r\n        componentContext.state.rows,\r\n        componentContext.props.itemNameList,\r\n        componentContext.props.priceMap\r\n    );\r\n    var updatedRows = getUpdatedRowData(\r\n        componentContext.state.rows,\r\n        componentContext.props.itemNameList,\r\n        componentContext.props.priceMap\r\n    );\r\n    //update the component's local variables that are mapped to the UI elements\r\n    updateLocalState(componentContext, updatedTotal, updatedRows);\r\n    //update the received items in redux's global store\r\n    componentContext.props.pushSentItemDetails(updatedRows, updatedTotal);\r\n    //update the summary details in redux's global store\r\n    componentContext.props.pushTradeSummary(componentContext.props.received.total - updatedTotal);\r\n}\r\n\r\nexport function triggerReceivedItemsDataUpdates(componentContext) {\r\n    var updatedTotal = getTotalPrice(\r\n        componentContext.state.rows,\r\n        componentContext.props.itemNameList,\r\n        componentContext.props.priceMap\r\n    );\r\n    var updatedRows = getUpdatedRowData(\r\n        componentContext.state.rows,\r\n        componentContext.props.itemNameList,\r\n        componentContext.props.priceMap\r\n    );\r\n    //update the component's local variables that are mapped to the UI elements\r\n    updateLocalState(componentContext, updatedTotal, updatedRows);\r\n    //update the received items in redux's global store\r\n    componentContext.props.pushReceivedItemsDetail(updatedRows, updatedTotal);\r\n    //update the summary details in redux's global store\r\n    componentContext.props.pushTradeSummary(updatedTotal - componentContext.props.sent.total);\r\n}\r\n\r\nfunction updateLocalState(componentContext, updatedTotal, updatedRows) {\r\n    componentContext.setState({\r\n        ...componentContext.state,\r\n        totalPrice: updatedTotal,\r\n        rows: updatedRows\r\n    });\r\n}","import React, { Component } from \"react\";\r\nimport { Button, Input, Modal, ModalHeader, ModalBody, ModalFooter, Container, Row, Col } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { fetchAllItemMetaData } from \"../actions/MarketItemsFetchAction\"\r\nimport { fetchPrice } from \"../actions/MarketPriceFetchAction\"\r\nimport { fetchUserName } from \"../actions/ProfileDetailsFetchAction\"\r\nimport { triggerSentItemsDataUpdates, triggerReceivedItemsDataUpdates } from '../helpers/ItemsComponentHelper'\r\nimport debugConsole from '../utils/ConsoleUtil'\r\n\r\nclass InitialiserComponent extends Component {\r\n\r\n  REFRESH_INTERVAL=3000;\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      apiKey: props.apiKey,\r\n      isRefreshing: false,\r\n      currentItemNameForPriceRefresh: \"\"\r\n    }\r\n  }\r\n\r\n  updateApiKey = (event) => {\r\n    this.setState({ apiKey: event.target.value })\r\n    this.props.updateApiKeyInReduxStore(event.target.value);\r\n  }\r\n\r\n  saveApiKeyAndInit = () => {\r\n    if (!localStorage.getItem(\"MARKET_ITEMS\")) {\r\n      debugConsole(\"item details not found in cache; thus, calling the items api now!\");\r\n      this.props.updateMarketItemDetailsInReduxStore(this.state.apiKey);\r\n      this.props.updateUserNameInReduxStore(this.state.apiKey);\r\n    }\r\n    else {\r\n      debugConsole(\"item details already present\");\r\n    }\r\n  }\r\n\r\n  refreshPrices = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      isRefreshing: true\r\n    }, () => {\r\n      var componentContext = this;\r\n      var count = 0;\r\n      Object.keys(this.props.priceMap).forEach((itemName) => {\r\n        if (this.props.priceMap[itemName] !== 0) {\r\n          count++;\r\n          setTimeout(function () {\r\n            debugConsole(\"currently refreshing : \" + itemName);\r\n            componentContext.refreshPrice(itemName);\r\n          }, componentContext.REFRESH_INTERVAL * count);\r\n        }\r\n      });\r\n      setTimeout(function () {\r\n        componentContext.setState({\r\n          ...componentContext.state,\r\n          isRefreshing: false,\r\n          currentItemNameForPriceRefresh: \"\"\r\n        });\r\n      }, componentContext.REFRESH_INTERVAL * count);\r\n    });\r\n  }\r\n\r\n  refreshPrice(itemName) {\r\n    this.setState({\r\n      ...this.state,\r\n      currentItemNameForPriceRefresh: itemName\r\n    }, () => {\r\n      this.props.refreshItemPriceInReduxStore(\r\n        this.props.apiKey,\r\n        itemName,\r\n        this.props.itemsStore,\r\n        this\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let btnName;\r\n    let btnColor;\r\n    if (this.props.loading) {\r\n      btnName = \"loading...\";\r\n      btnColor = \"info\";\r\n    }\r\n    else {\r\n      if (this.props.itemsStore === null || !this.props.itemsStore) {\r\n        btnName = \"Initialise\";\r\n        btnColor = \"primary\";\r\n      }\r\n      else {\r\n        btnName = \"Update API Key\";\r\n        btnColor = \"secondary\";\r\n      }\r\n    }\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <hr></hr>\r\n        </Row>\r\n        <Row>\r\n          <Col><h4>Torn barter receipt generator</h4></Col>\r\n          <Col>\r\n            <Input type=\"text\" placeholder=\"Your API KEY goes here..\" value={this.props.apiKey === null ? \"\" : this.props.apiKey} onChange={this.updateApiKey} />\r\n          </Col>\r\n          <Col>\r\n            <Button color={btnColor} onClick={() => { this.saveApiKeyAndInit() }}>{btnName}</Button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <Button color=\"info\" onClick={this.refreshPrices}>Fetch Latest Prices</Button>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <hr></hr>\r\n        </Row>\r\n        <Row>\r\n          <Modal isOpen={this.state.isRefreshing}>\r\n            <ModalHeader>Please wait</ModalHeader>\r\n            <ModalBody>\r\n              {this.state.currentItemNameForPriceRefresh === \"\" ?\r\n                <h6>Calling Torn API..</h6> :\r\n                <h6>Fetching the latest price of {this.state.currentItemNameForPriceRefresh}..</h6>}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n  return {\r\n    ...reduxState\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateMarketItemDetailsInReduxStore: function (apiKey) {\r\n      dispatch(fetchAllItemMetaData(apiKey))\r\n    },\r\n    updateApiKeyInReduxStore: function (apiKey) {\r\n      dispatch({ type: \"API_KEY_UPDATED\", payload: { apiKey } });\r\n    },\r\n    updateUserNameInReduxStore: function (apiKey) {\r\n      dispatch(fetchUserName(apiKey));\r\n    },\r\n    refreshItemPriceInReduxStore: function (apiKey, itemName, itemsStore, componentContext) {\r\n      dispatch(fetchPrice(apiKey, itemName, itemsStore, componentContext, true,\r\n        // updates to fire after price has been fetched\r\n        () => {\r\n          triggerReceivedItemsDataUpdates(componentContext.props.contexts.receivedItemComponentContext);\r\n          triggerSentItemsDataUpdates(componentContext.props.contexts.sentItemComponentContext);\r\n        }\r\n      ));\r\n    }\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InitialiserComponent);","export function areRowsEmpty(rows) {\r\n    var isEmpty = false;\r\n    rows.forEach(row => {\r\n        if (isCurrentRowEmpty(row)) {\r\n            isEmpty = true;\r\n            return;\r\n        }\r\n    });\r\n    return isEmpty;\r\n}\r\n\r\nexport function refinedOptions(props,rows){\r\n    if(props.itemNameList===null){\r\n        return [];\r\n    }\r\n    var refinedList=props.itemNameList.filter( item =>{\r\n        var itemAlreadySelected=false;\r\n        rows.forEach((row)=>{\r\n            if(row.name===item){\r\n                itemAlreadySelected=true;\r\n               return; \r\n            }\r\n        });\r\n        return !itemAlreadySelected;\r\n    });\r\n    return refinedList;\r\n}\r\n\r\nexport function sentAndReceivedItemsEmpty(props){\r\n    return   isItemListNotInitialised(props)\r\n            || areRowsEmpty(props.sent.items) \r\n            || areRowsEmpty(props.received.items);\r\n}\r\n\r\nexport function isCurrentRowEmpty(row){\r\n    return row.name === \"\" || row.mPrice===0 || row.qty===0;\r\n}\r\n\r\nexport function isItemListNotInitialised(props){\r\n    return props.itemsNameList === null;\r\n}","/* eslint-disable react/no-direct-mutation-state */\r\n/* core imports */\r\nimport React, { Component } from \"react\"\r\nimport { connect } from 'react-redux';\r\n/* UI element imports */\r\nimport { Input, Container, Row, Col, Table, Button, ButtonGroup } from \"reactstrap\"\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\n/* custom import */\r\nimport { fetchPrice } from '../actions/MarketPriceFetchAction'\r\nimport { isCurrentRowEmpty, isItemListNotInitialised, refinedOptions } from '../utils/ItemRowUtil'\r\nimport {\r\n    updateTypeAheadSelectedName,\r\n    addRowInReceivedItems,\r\n    removeRowFromReceivedItems,\r\n    updateQtyInReceivedItems\r\n} from '../helpers/ItemsComponentHelper'\r\n\r\nclass ReceivedItemsComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            totalPrice: this.props.received.total,\r\n            rows: this.props.received.items,\r\n            forceRecalculation: false,\r\n            type: \"RECEIVED\"\r\n        }\r\n        props.updateContextInReduxStore(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col><h4>Received</h4></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Table id=\"receivedListTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Item name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Best Price</th>\r\n                                <th>Total Price</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.rows.map((row, index) => {\r\n                                return (\r\n                                    <tr key={row.id}>\r\n                                        <td>\r\n                                            <Typeahead id={\"name_\" + row.id} maxResults={5} disabled={this.props.itemNameList === null} onChange={(selected) => { updateTypeAheadSelectedName(selected, row.id, this) }} options={refinedOptions(this.props, this.state.rows)} />\r\n                                        </td>\r\n                                        <td><Input type=\"number\" disabled={this.props.itemNameList === null} name={\"qty_\" + row.id} value={row.qty} onChange={(event) => { updateQtyInReceivedItems(event, this) }} min={0} /></td>\r\n                                        <td><Input type=\"number\" name={\"mPrice_\" + row.id} value={row.mPrice} disabled={true} /></td>\r\n                                        <td><Input type=\"number\" name={\"tPrice_\" + row.id} value={row.tPrice} disabled={true} /></td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <ButtonGroup>\r\n                                                    <Button color=\"success\" disabled={isCurrentRowEmpty(row) || isItemListNotInitialised(this.props)} onClick={() => { addRowInReceivedItems(this) }}>+</Button>\r\n                                                    <Button color=\"danger\" disabled={this.state.rows.length === 1 || isItemListNotInitialised(this.props)} onClick={() => { removeRowFromReceivedItems(row, this) }}>-</Button>\r\n                                                </ButtonGroup>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n                <Row>\r\n                    <Col>Total market price of items received: {this.state.totalPrice}</Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n    return {\r\n        ...reduxState\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n        updateContextInReduxStore: (componentContext) => {\r\n            dispatch({\r\n                type: \"RECEIVED_ITEM_COMPONENT_CONTEXT_UPDATED\", payload: {\r\n                    receivedItemComponentContext: componentContext\r\n                }\r\n            });\r\n        },\r\n\r\n        updateReceivedItemsData: (apiKey, itemName, itemsStore, componentContext, updatesCallback) => {\r\n            dispatch(fetchPrice(apiKey, itemName, itemsStore, componentContext, false, updatesCallback));\r\n        },\r\n\r\n        pushReceivedItemsDetail: (items, totalPrice) => {\r\n            dispatch({\r\n                type: 'UPDATE_RECEIVED_ITEMS', payload: {\r\n                    received: {\r\n                        items: items,\r\n                        total: totalPrice\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        pushTradeSummary: (calculatedBalance) => {\r\n            dispatch({ type: \"UPDATE_TRADE_SUMMARY\", payload: { summary: { balance: calculatedBalance } } });\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReceivedItemsComponent);","/* eslint-disable react/no-direct-mutation-state */\r\n/* core imports */\r\nimport React, { Component } from \"react\"\r\nimport { connect } from 'react-redux';\r\n/* UI element imports */\r\nimport { Input, Container, Row, Col, Table, Button, ButtonGroup } from \"reactstrap\"\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\n/* custom import */\r\nimport { fetchPrice } from '../actions/MarketPriceFetchAction'\r\nimport { isCurrentRowEmpty, isItemListNotInitialised, refinedOptions } from '../utils/ItemRowUtil'\r\nimport {\r\n    updateTypeAheadSelectedName,\r\n    addRowInSentItems,\r\n    removeRowFromSentItems,\r\n    updateQtyInSentItems\r\n} from '../helpers/ItemsComponentHelper'\r\n\r\nclass SentItemsComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            totalPrice: this.props.sent.total,\r\n            rows: this.props.sent.items,\r\n            forceRecalculation: false,\r\n            type: \"SENT\"\r\n        }\r\n        props.updateContextInReduxStore(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col><h4>Sent</h4></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Table id=\"sentListTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Item name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Best Price</th>\r\n                                <th>Total Price</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.rows.map((row, index) => {\r\n                                return (\r\n                                    <tr key={row.id}>\r\n                                        <td>\r\n                                            <Typeahead id={\"name_\" + row.id} maxResults={5} disabled={this.props.itemNameList === null} onChange={(selected) => { updateTypeAheadSelectedName(selected, row.id, this) }} options={refinedOptions(this.props, this.state.rows)} />\r\n                                        </td>\r\n                                        <td><Input type=\"number\" disabled={this.props.itemNameList === null} name={\"qty_\" + row.id} value={row.qty} onChange={(event) => { updateQtyInSentItems(event, this) }} min={0} /></td>\r\n                                        <td><Input type=\"number\" name={\"mPrice_\" + row.id} value={row.mPrice} disabled={true} /></td>\r\n                                        <td><Input type=\"number\" name={\"tPrice_\" + row.id} value={row.tPrice} disabled={true} /></td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <ButtonGroup>\r\n                                                    <Button color=\"success\" disabled={isCurrentRowEmpty(row) || isItemListNotInitialised(this.props)} onClick={() => { addRowInSentItems(this) }}>+</Button>\r\n                                                    <Button color=\"danger\" disabled={this.state.rows.length === 1 || isItemListNotInitialised(this.props)} onClick={() => { removeRowFromSentItems(row, this) }}>-</Button>\r\n                                                </ButtonGroup>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n                <Row>\r\n                    <Col>Total market price of items sent: {this.state.totalPrice}</Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n    return {\r\n        ...reduxState\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        \r\n        updateContextInReduxStore: (componentContext) => {\r\n            dispatch({\r\n                type: \"SENT_ITEM_COMPONENT_CONTEXT_UPDATED\", payload: {\r\n                    sentItemComponentContext: componentContext\r\n                }\r\n            });\r\n        },\r\n\r\n        updateSentItemsData: (apiKey, itemName, itemsStore, componentContext, updatesCallback) => {\r\n            dispatch(fetchPrice(apiKey, itemName, itemsStore, componentContext, false, updatesCallback));\r\n        },\r\n\r\n        pushSentItemDetails: (items, totalPrice) => {\r\n            dispatch({\r\n                type: 'UPDATE_SENT_ITEMS', payload: {\r\n                    sent: {\r\n                        items: items,\r\n                        total: totalPrice\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        pushTradeSummary: (calculatedBalance) => {\r\n            dispatch({ type: \"UPDATE_TRADE_SUMMARY\", payload: { summary: { balance: calculatedBalance } } });\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SentItemsComponent);","import React, { Component } from \"react\"\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Container, Row, Col } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { sentAndReceivedItemsEmpty } from '../utils/ItemRowUtil'\r\nimport * as clipboard from \"clipboard-polyfill/text\";\r\n\r\nclass SummaryDetailComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            received: this.props.received,\r\n            sent: this.props.sent,\r\n            tradeSummary: this.props.tradeSummary,\r\n            isSummaryDialogOpen: false,\r\n            showCopiedButtonName: false,\r\n            forceRecalculation: false\r\n        }\r\n        props.updateContextInReduxStore(this);\r\n    }\r\n\r\n    toggleSummaryDialog = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            isSummaryDialogOpen: !this.state.isSummaryDialogOpen\r\n        })\r\n    }\r\n\r\n    copySummaryDataToClipboard = (event) => {\r\n        var context = this;\r\n        var textToCopy = document.getElementById(\"summaryText\").innerText;\r\n        clipboard.writeText(textToCopy).then(\r\n            function () {\r\n                context.setState({\r\n                    ...context.state,\r\n                    showCopiedButtonName: true\r\n                },\r\n                    () => {\r\n                        window.setTimeout(() => {\r\n                            context.setState({\r\n                                ...context.state,\r\n                                showCopiedButtonName: false\r\n                            })\r\n                        }, 1000)\r\n                    });\r\n\r\n            },\r\n            function () {\r\n                console.error(\"failed to copy!\");\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let btnColor;\r\n        let balanceText = \"\";\r\n        let balanceColor = \"green\";\r\n\r\n        if (this.props.itemsStore === null || !this.props.itemsStore) {\r\n            btnColor = \"secondary\";\r\n        }\r\n        else {\r\n            btnColor = \"primary\";\r\n        }\r\n        //user received less\r\n        if (this.props.tradeSummary.balance < 0) {\r\n            balanceText = this.props.tradeSummary.yourName + \" gets $\" + this.props.tradeSummary.balance + \".\";\r\n        }\r\n        //user received more\r\n        else if (this.props.tradeSummary.balance > 0) {\r\n            balanceColor = \"red\";\r\n            balanceText = this.props.tradeSummary.yourName + \" needs to send an additional $\" + this.props.tradeSummary.balance + \".\";\r\n        }\r\n        //balanced\r\n        else if (this.props.tradeSummary.balance === 0) {\r\n            balanceText = \"The trade is balanced.\";\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <h5 style={{ color: balanceColor }}>{balanceText}</h5>\r\n                    </Col>\r\n                    <Row>\r\n                        <Col>\r\n                            <Button\r\n                                color={btnColor}\r\n                                disabled={sentAndReceivedItemsEmpty(this.props)}\r\n                                onClick={this.toggleSummaryDialog}>\r\n                                Show Summary\r\n                            </Button>\r\n                            <Modal isOpen={this.state.isSummaryDialogOpen} toggle={this.toggleSummaryDialog}>\r\n                                <ModalHeader toggle={this.toggleSummaryDialog}>Trade Summary</ModalHeader>\r\n                                <ModalBody>\r\n                                    {sentAndReceivedItemsEmpty(this.props) ?\r\n                                        null :\r\n                                        (\r\n                                            <div id=\"summaryText\">\r\n                                                <div>\r\n                                                    <span style={{ \"textDecoration\": \"underline\" }}>\r\n                                                        {this.props.tradeSummary.yourName}\r\n                                                        {\" received the following items, \"}\r\n                                                        {\"worth $\" + this.props.received.total + \" in total\"}\r\n                                                    </span>\r\n                                                    <br />\r\n                                                </div>\r\n                                                <div>\r\n                                                    {this.props.received.items.map((row) => {\r\n                                                        return <span key={row.id}>\r\n                                                            <span style={{ \"fontWeight\": \"bold\" }}>{row.name}</span>\r\n                                                            <span style={{ \"color\": \"blue\" }}>{\" x\" + row.qty}</span>\r\n                                                            {\" at $\"}\r\n                                                            <span style={{ \"color\": \"green\" }}>{row.mPrice}</span>\r\n                                                            {\"  each, $\"}\r\n                                                            <span style={{ \"color\": \"green\" }}>{row.tPrice}</span>\r\n                                                            {\" in total\"}<br />\r\n                                                        </span>\r\n                                                    })}\r\n                                                </div>\r\n                                                <span><br /></span>\r\n\r\n                                                <div>\r\n                                                    <span style={{ \"textDecoration\": \"underline\" }}>\r\n                                                        {this.props.tradeSummary.yourName}\r\n                                                        {\" sent the following items, \"}\r\n                                                        {\"worth $\" + this.props.sent.total + \" in total\"}\r\n                                                    </span>\r\n                                                    <br />\r\n                                                </div>\r\n                                                <div>\r\n                                                    {this.props.sent.items.map((row) => {\r\n                                                        return <span key={row.id}>\r\n                                                            <span style={{ \"fontWeight\": \"bold\" }}>{row.name}</span>\r\n                                                            <span style={{ \"color\": \"blue\" }}>{\" x\" + row.qty}</span>\r\n                                                            {\" at $\"}\r\n                                                            <span style={{ \"color\": \"green\" }}>{row.mPrice}</span>\r\n                                                            {\"  each, $\"}\r\n                                                            <span style={{ \"color\": \"green\" }}>{row.tPrice}</span>\r\n                                                            {\" in total\"}<br />\r\n                                                        </span>\r\n                                                    })}\r\n                                                </div>\r\n                                                <span>----------------</span><br/>\r\n                                                <span style={{ \"fontWeight\": \"bold\" }}>{balanceText}</span>\r\n                                            </div>\r\n                                        )}\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                    <Button color=\"primary\" onClick={this.copySummaryDataToClipboard}>\r\n                                        {this.state.showCopiedButtonName ? \"Copied!\" : \"Copy To Clipboard\"}\r\n                                    </Button>{' '}\r\n                                    <Button color=\"secondary\" onClick={this.toggleSummaryDialog}>Cancel</Button>\r\n                                </ModalFooter>\r\n                            </Modal>\r\n                        </Col>\r\n                    </Row>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n    return {\r\n        ...reduxState\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateContextInReduxStore: (componentContext) => {\r\n            dispatch({\r\n                type: \"SUMMARY_DETAIL_COMPONENT_CONTEXT_UPDATED\", payload: {\r\n                    summaryDetailComponentContext: componentContext\r\n                }\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SummaryDetailComponent);","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\n\r\nclass FooterComponent extends Component {\r\n\r\n    render() {\r\n        return <Container>\r\n            <Col>\r\n                <Row>\r\n                    <br/>\r\n                </Row>\r\n                <Row>\r\n                    <span style={{ \"fontSize\": \"80%\" }}><i>\r\n                        If you think this tool is useful & want to <span style={{ \"textDecoration\":\"line-through\" }}>make me rich</span> donate, or if the tool is broken,\r\n                        please click&nbsp;<a href=\"https://www.torn.com/profiles.php?XID=2575642\">here</a>\r\n                    </i></span>\r\n                </Row>\r\n            </Col>\r\n        </Container>\r\n    }\r\n}\r\n\r\nexport default FooterComponent;","import React from 'react';\nimport InitialiserComponent from './components/InitialiserComponent'\nimport ReceivedItemsComponent from './components/ReceivedItemsComponent'\nimport SentItemsComponent from './components/SentItemsComponent'\nimport SummaryDetailComponent from './components/SummaryDetailComponent'\nimport FooterComponent from './components/FooterComponent'\nimport { Container, Row, Col } from 'reactstrap';\n\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <Col><InitialiserComponent/></Col>\n      </Row>\n      <Row>\n        <Col><ReceivedItemsComponent/></Col>\n        <Col><SentItemsComponent/></Col>\n      </Row>\n      <Row>\n        <Col><SummaryDetailComponent/></Col>\n      </Row>\n      <Row>\n        <Col><FooterComponent/></Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;","export function populateDefaultPriceMap() {\r\n    if (localStorage.getItem(\"MARKET_ITEMS_SIMPLE\")) {\r\n        var itemNames = JSON.parse(localStorage.getItem(\"MARKET_ITEMS_SIMPLE\"));\r\n        var defaultPriceMap = {};\r\n        itemNames.forEach((itemName) => {\r\n            defaultPriceMap[itemName] = 0;\r\n        });\r\n        console.log(\"price map initialised successfully!\");\r\n        return defaultPriceMap;\r\n    }\r\n    else {\r\n        console.error(\"price map failed to initialise as no items metadata was found!\");\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport { IdGenerator } from './utils/IdGeneratorUtil'\nimport { populateDefaultPriceMap } from './utils/PriceMapGeneratorUtil'\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { logger } from 'redux-logger'\n\nconst mainReducer = function (\n\n  state = {\n    time: new Date(),\n    apiKey: localStorage.getItem(\"API_KEY\"),\n    received: {\n      items: [{ id: IdGenerator(), name: \"\", qty: 0, mPrice: 0, tPrice: 0 }],\n      total: 0\n    },\n    sent: {\n      items: [{ id: IdGenerator(), name: \"\", qty: 0, mPrice: 0, tPrice: 0 }],\n      total: 0\n    },\n    tradeSummary: {\n      yourName: localStorage.getItem(\"YOUR_NAME\"),\n      theirName: \"\",\n      balance: 0\n    },\n    priceMap: populateDefaultPriceMap(),\n    loading: false,\n    apiErrorMsg: \"\",\n    apiCallSuccess: undefined,\n    itemsStore: JSON.parse(localStorage.getItem(\"MARKET_ITEMS\")),\n    itemNameList: JSON.parse(localStorage.getItem(\"MARKET_ITEMS_SIMPLE\")),\n    contexts:{\n      sentItemComponentContext:null,\n      receivedItemComponentContext:null,\n      summaryDetailComponentContext:null,\n    }\n  }, action) {\n\n  switch (action.type) {\n    case \"API_KEY_UPDATED\":\n      return {\n        ...state,\n        apiKey: action.payload.apiKey,\n        time: new Date()\n      };\n    case \"YOUR_NAME_UPDATED\":\n      return {\n        ...state,\n        tradeSummary: {\n          ...state.tradeSummary,\n          yourName: action.payload.yourName\n        },\n        time: new Date()\n      };\n    case \"MARKET_PRICE_FETCHED\":\n      var updatedPriceMap = { ...state.priceMap };\n      updatedPriceMap[action.payload.itemName] = action.payload.price;\n      return {\n        ...state,\n        priceMap: updatedPriceMap,\n        time: new Date()\n      };\n    case \"UPDATE_RECEIVED_ITEMS\":\n      return {\n        ...state,\n        received: action.payload.received,\n        apiCallSuccess: undefined,\n        loading: false,\n        time: new Date()\n      };\n    case \"UPDATE_SENT_ITEMS\":\n      return {\n        ...state,\n        sent: action.payload.sent,\n        apiCallSuccess: undefined,\n        loading: false,\n        time: new Date()\n      };\n    case \"UPDATE_TRADE_SUMMARY\":\n      return {\n        ...state,\n        tradeSummary: {\n          ...state.tradeSummary,\n          balance:action.payload.summary.balance\n        },\n        time: new Date()\n      };\n    case \"MARKET_ITEMS_FETCH_STARTED\":\n      return {\n        ...state,\n        loading: action.payload.loading,\n        apiCallSuccess: undefined,\n        time: new Date()\n      };\n    case \"MARKET_ITEMS_FETCH_SUCCESS\":\n      return {\n        ...state,\n        priceMap: populateDefaultPriceMap(),\n        loading: action.payload.loading,\n        itemsStore: action.payload.itemsStore,\n        itemNameList: action.payload.itemNameList,\n        apiCallSuccess: true,\n        time: new Date()\n      };\n    case \"API_CALL_FAILED\":\n      return {\n        ...state,\n        loading: action.payload.loading,\n        apiCallSuccess: false,\n        apiErrorMsg: action.payload.error,\n        time: new Date()\n      };\n      case \"SENT_ITEM_COMPONENT_CONTEXT_UPDATED\":\n        return {\n          ...state,\n          contexts: {\n            ...state.contexts,\n            sentItemComponentContext:action.payload.sentItemComponentContext\n          }\n        };\n        case \"RECEIVED_ITEM_COMPONENT_CONTEXT_UPDATED\":\n        return {\n          ...state,\n          contexts: {\n            ...state.contexts,\n            receivedItemComponentContext:action.payload.receivedItemComponentContext\n          }\n        };\n        case \"SUMMARY_DETAIL_COMPONENT_CONTEXT_UPDATED\":\n        return {\n          ...state,\n          contexts: {\n            ...state.contexts,\n            summaryDetailComponentContext:action.payload.summaryDetailComponentContext\n          }\n        };\n    default:\n      return state;\n  }\n};\n\nlet reduxStore;\nif (localStorage.getItem(\"debug\")) {\n  reduxStore = createStore(mainReducer, applyMiddleware(thunk, logger));\n}\nelse {\n  reduxStore = createStore(mainReducer, applyMiddleware(thunk));\n}\nconst ReactApp = () => (\n  <Provider store={reduxStore}>\n    <App />\n  </Provider>\n);\nReactDOM.render(<ReactApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}