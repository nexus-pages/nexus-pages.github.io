{"version":3,"sources":["actions/MarketItemsFetchAction.js","utils/ConsoleUtil.js","actions/MarketPriceFetchAction.js","actions/ProfileDetailsFetchAction.js","utils/IdGeneratorUtil.js","utils/ItemRowUtil.js","utils/PriceCalculatorUtil.js","helpers/ItemsComponentHelper.js","components/InitialiserComponent.js","components/ReceivedItemsComponent.js","components/SentItemsComponent.js","components/SummaryDetailComponent.js","components/FooterComponent.js","App.js","utils/PriceMapGeneratorUtil.js","serviceWorker.js","index.js"],"names":["success","itemsStore","itemNameList","type","payload","loading","started","failed","error","debugConsole","msg","localStorage","getItem","console","log","fetchPrice","apiKey","itemName","componentContext","forceApiCall","updatesCallback","dispatch","itemPriceUrl","idByName","cachedBestPriceForItem","props","priceMap","axios","get","then","response","itemMarketListings","data","itemmarket","privateBazaarListings","bazaar","bestItemMarketPrice","bestPrivateBazaarPrice","length","cost","pushPriceAndRowDetailsInReduxStore","catch","err","JSON","stringify","bestPriceAvailable","yourName","IdGenerator","crypto","toString","usdFormatter","Intl","NumberFormat","style","currency","areRowsEmpty","rows","isEmpty","forEach","row","isCurrentRowEmpty","refinedOptions","filter","item","itemAlreadySelected","name","sentAndReceivedItemsEmpty","isItemListNotInitialised","sent","items","received","mPrice","qty","itemsNameList","getEmptySentRow","id","tPrice","getEmptyReceivedRow","profitPercent","actualPrice","actualTotalPrice","getFormattedCurrency","number","format","getTotalPrice","itemNamesList","totalPrice","includes","parseInt","updateCash","cashValue","setState","state","cash","triggerReceivedItemsDataUpdates","triggerSentItemsDataUpdates","updateTypeAheadSelectedName","selectedItemName","rowId","itemProfit","updateReceivedItemsData","updateSentItemsData","updateNumericInputInReceivedItems","event","fieldName","target","split","value","forceUpdate","cashSentCash","isNaN","updatedTotal","updatedRows","map","updateLocalState","pushSentItemDetails","totalValueOfCashAndItemsSent","totalValueOfCashAndItemsReceived","totalActualPrice","pushTradeSummary","changedFieldName","cashReceivedCash","updatedTotalActual","totalPriceAfterProfit","marketPrice","toFixed","getTotalPriceWithProfit","parseFloat","getUpdatedRowDataWithProfit","pushReceivedItemsDetail","total","InitialiserComponent","REFRESH_INTERVAL","updateApiKey","updateApiKeyInReduxStore","saveApiKeyAndInit","updateMarketItemDetailsInReduxStore","updateUserNameInReduxStore","refreshPrices","isRefreshing","count","reduxStore","itemNames","Set","add","getAllItemsAddedInTrade","setTimeout","refreshPrice","currentItemNameForPriceRefresh","this","refreshItemPriceInReduxStore","btnName","btnColor","Container","Row","Col","xs","Input","placeholder","onChange","Button","color","onClick","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Component","connect","reduxState","setItem","res","nameById","Object","entries","key","itemId","toLowerCase","push","message","fetchAllItemMetaData","fetchUserName","contexts","receivedItemComponentContext","sentItemComponentContext","ReceivedItemsComponent","forceRecalculation","updateContextInReduxStore","Table","borderless","size","width","index","maxResults","disabled","selected","options","e","min","max","ButtonGroup","currentRow","InputGroup","InputGroupAddon","addonType","InputGroupText","cashReceived","calculatedBalance","summary","balance","SentItemsComponent","updateNumericInputInSentItems","cashSent","SummaryDetailComponent","toggleSummaryDialog","isSummaryDialogOpen","copySummaryDataToClipboard","context","textToCopy","document","getElementById","innerText","clipboard","showCopiedButtonName","window","tradeSummary","balanceText","balanceColor","toggle","summaryDetailComponentContext","FooterComponent","href","App","populateDefaultPriceMap","parse","defaultPriceMap","Boolean","location","hostname","match","mainReducer","time","Date","theirName","apiErrorMsg","apiCallSuccess","undefined","action","updatedPriceMap","price","createStore","applyMiddleware","thunk","logger","ReactApp","store","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83632022.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const fetchAllItemMetaData = (apiKey) => {\r\n  localStorage.setItem(\"API_KEY\",apiKey);\r\n  return dispatch => {\r\n    dispatch(started());\r\n    axios.get(\"https://api.torn.com/torn/?selections=items&key=\" + apiKey)\r\n      .then(res => {\r\n        var itemNameList = [];\r\n        var itemsStore = {\r\n          idByName: {},\r\n          nameById: {}\r\n        };\r\n        Object.entries(res.data.items).forEach(([key, value]) => {\r\n          var itemId = parseInt(key);\r\n          var itemName = value.name;\r\n          var isIllegalItemName=itemName.toLowerCase().includes(\"undefined\");\r\n          if(!isIllegalItemName){\r\n            itemsStore.idByName[itemName] = itemId;\r\n            itemsStore.nameById[itemId] = itemName;\r\n            itemNameList.push(itemName);\r\n          }\r\n        });\r\n        localStorage.setItem(\"MARKET_ITEMS\", JSON.stringify(itemsStore))\r\n        localStorage.setItem(\"MARKET_ITEMS_SIMPLE\", JSON.stringify(itemNameList))\r\n        dispatch(success(itemsStore, itemNameList));\r\n      })\r\n      .catch(err => {\r\n        dispatch(failed(err.message));\r\n      });\r\n  };\r\n};\r\n\r\nconst success = (itemsStore, itemNameList) => ({\r\n  type: \"MARKET_ITEMS_FETCH_SUCCESS\",\r\n  payload: {\r\n    loading: false,\r\n    itemsStore: { ...itemsStore },\r\n    itemNameList: [...itemNameList]\r\n  }\r\n});\r\n\r\nconst started = () => ({\r\n  type: \"MARKET_ITEMS_FETCH_STARTED\",\r\n  payload: {\r\n    loading: true\r\n  }\r\n});\r\n\r\nconst failed = (error) => ({\r\n  type: \"API_CALL_FAILED\",\r\n  payload: {\r\n    error,\r\n    loading: false\r\n  }\r\n});","export function debugConsole(msg){\r\n    if(localStorage.getItem(\"debug\")){\r\n        console.log(msg);\r\n    }\r\n}\r\n\r\nexport default debugConsole;","import axios from 'axios';\r\nimport debugConsole from '../utils/ConsoleUtil'\r\n\r\nexport const fetchPrice = (apiKey, itemName, itemsStore, componentContext, forceApiCall, updatesCallback) => {\r\n  return (dispatch) => {\r\n    var itemId = itemsStore.idByName[itemName];\r\n    var itemPriceUrl = \"https://api.torn.com/market/\" + itemId + \"?selections=itemmarket,bazaar&key=\" + apiKey;\r\n    var cachedBestPriceForItem = componentContext.props.priceMap[itemName];\r\n    if (cachedBestPriceForItem === 0 || forceApiCall) {\r\n      debugConsole(\"prices to be fetched from the API\");\r\n      var itemPricePromise = axios.get(itemPriceUrl);\r\n      itemPricePromise.then((response) => {\r\n        var itemMarketListings = response.data.itemmarket;\r\n        var privateBazaarListings = response.data.bazaar;\r\n        var bestPriceAvailable = 0;\r\n        var bestItemMarketPrice = 0;\r\n        var bestPrivateBazaarPrice = 0;\r\n        if (itemMarketListings !== null && itemMarketListings.length > 0 && itemMarketListings[0].cost !== null) {\r\n          bestItemMarketPrice = itemMarketListings[0].cost;\r\n        }\r\n        if (privateBazaarListings !== null && privateBazaarListings.length > 0 && privateBazaarListings[0].cost !== null) {\r\n          bestPrivateBazaarPrice = privateBazaarListings[0].cost;\r\n        }\r\n\r\n        //best price out of bazaar & market\r\n        bestPriceAvailable = bestPrivateBazaarPrice < bestItemMarketPrice ? bestPrivateBazaarPrice : bestItemMarketPrice;\r\n\r\n        pushPriceAndRowDetailsInReduxStore(itemName, bestPriceAvailable, dispatch, updatesCallback);\r\n\r\n      }).catch((err) => {\r\n        console.error(JSON.stringify(err));\r\n        dispatch(failed(err));\r\n      });\r\n    }\r\n    else {\r\n      debugConsole(\"price for \" + itemName + \" is already fetched, value = \" + cachedBestPriceForItem);\r\n      pushPriceAndRowDetailsInReduxStore(itemName, cachedBestPriceForItem, dispatch, updatesCallback);\r\n    }\r\n  };\r\n};\r\n\r\nconst failed = (error) => ({\r\n  type: \"API_CALL_FAILED\",\r\n  payload: {\r\n    error,\r\n    loading: false\r\n  }\r\n});\r\n\r\nfunction pushPriceAndRowDetailsInReduxStore(itemName, bestPriceAvailable, dispatch, updatesCallback) {\r\n  dispatch({ type: 'MARKET_PRICE_FETCHED', payload: { \"price\": bestPriceAvailable, \"itemName\": itemName } });\r\n  //execute the updates after the price has been fetched\r\n  updatesCallback();\r\n}","import axios from 'axios';\r\n\r\nexport const fetchUserName = (apiKey) => {\r\n  return dispatch => {\r\n    axios.get(\"https://api.torn.com/user/?selections=profile&key=\"+apiKey)\r\n      .then(res => {\r\n        var yourName=res.data.name;\r\n        localStorage.setItem(\"YOUR_NAME\",yourName);\r\n        dispatch(success(yourName));\r\n      })\r\n      .catch(err => {\r\n        dispatch(failed(err.message));\r\n      });\r\n  };\r\n};\r\n\r\nconst success = (yourName) => ({\r\n  type: \"YOUR_NAME_UPDATED\",\r\n  payload: {\r\n    loading: false,\r\n    yourName\r\n  }\r\n});\r\n\r\nconst failed = (error) => ({\r\n  type: \"API_CALL_FAILED\",\r\n  payload: {\r\n    error,\r\n    loading: false\r\n  }\r\n});","import * as crypto from \"crypto\";\r\n\r\nexport function IdGenerator(){\r\n    return crypto.randomBytes(16).toString(\"base64\")\r\n}","import { IdGenerator } from './IdGeneratorUtil'\r\n\r\n\r\nlet usdFormatter=new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });\r\n\r\nexport function areRowsEmpty(rows) {\r\n    var isEmpty = false;\r\n    rows.forEach(row => {\r\n        if (isCurrentRowEmpty(row)) {\r\n            isEmpty = true;\r\n            return;\r\n        }\r\n    });\r\n    return isEmpty;\r\n}\r\n\r\nexport function refinedOptions(props,rows){\r\n    if(props.itemNameList===null){\r\n        return [];\r\n    }\r\n    var refinedList=props.itemNameList.filter( item =>{\r\n        var itemAlreadySelected=false;\r\n        rows.forEach((row)=>{\r\n            if(row.name===item){\r\n                itemAlreadySelected=true;\r\n               return; \r\n            }\r\n        });\r\n        return !itemAlreadySelected;\r\n    });\r\n    return refinedList;\r\n}\r\n\r\nexport function sentAndReceivedItemsEmpty(props){\r\n    return   isItemListNotInitialised(props)\r\n            || areRowsEmpty(props.sent.items) \r\n            || areRowsEmpty(props.received.items);\r\n}\r\n\r\nexport function isCurrentRowEmpty(row){\r\n    return row.name === \"\" || row.mPrice===0 || row.qty===0;\r\n}\r\n\r\nexport function isItemListNotInitialised(props){\r\n    return props.itemsNameList === null;\r\n}\r\n\r\nexport function getEmptySentRow(){\r\n    return { id: IdGenerator(), name: \"\", qty: 0, mPrice: 0, tPrice: 0 };\r\n}\r\n\r\nexport function getEmptyReceivedRow(){\r\n    return { id: IdGenerator(), name: \"\", qty: 0, profitPercent:0, mPrice: 0, tPrice: 0, actualPrice:0,actualTotalPrice:0 };\r\n}\r\n\r\nexport function getFormattedCurrency(number){\r\n   return usdFormatter.format(number);\r\n}\r\n\r\nexport function getAllItemsAddedInTrade(reduxStore){\r\n    var itemNames=new Set();\r\n    reduxStore.received.items.forEach((row)=>{\r\n        if(row.name!==\"\"){\r\n            itemNames.add(row.name);\r\n        }\r\n    });\r\n    reduxStore.sent.items.forEach((row)=>{\r\n        if(row.name!==\"\"){\r\n            itemNames.add(row.name);\r\n        }\r\n    });\r\n    return itemNames;\r\n}","\r\nexport function getUpdatedRowData(rows,itemNamesList,priceMap){\r\n    return rows.map((row)=>{\r\n        if(itemNamesList.includes(row.name)){\r\n            //update mPrice\r\n            row.mPrice=priceMap[row.name];\r\n            //update tPrice\r\n            row.tPrice=row.qty*row.mPrice;\r\n        }\r\n        return {...row};\r\n    });\r\n}\r\n\r\nexport function getTotalPrice(rows,itemNamesList,priceMap){\r\n    var totalPrice=0;\r\n    rows.forEach((row)=>{\r\n        if(itemNamesList.includes(row.name)){\r\n            totalPrice+=parseInt(priceMap[row.name])*row.qty;\r\n        }\r\n    });\r\n    return totalPrice;\r\n}\r\n\r\nexport function getUpdatedRowDataWithProfit(rows,itemNamesList,priceMap,changedFieldName){\r\n    return rows.map((row)=>{\r\n        if(itemNamesList.includes(row.name)){\r\n            //actual market price\r\n            var marketPrice=priceMap[row.name];\r\n            row.mPrice=marketPrice;\r\n            //price after taking profit based on either 'actualPrice' or 'profit %', which is the default option\r\n            if(changedFieldName && changedFieldName.includes(\"actualPrice\")){\r\n                row.profitPercent=parseFloat((((marketPrice-parseFloat(row.actualPrice))*100)/marketPrice).toFixed(3));\r\n            }\r\n            else{\r\n                row.actualPrice=(marketPrice-((marketPrice*(parseFloat(row.profitPercent)).toFixed(3))/100)).toFixed();\r\n            }\r\n            //total price calculated with market price\r\n            row.tPrice=row.qty*row.mPrice;\r\n            //actual total price calculated after taking profit\r\n            row.actualTotalPrice=row.qty*row.actualPrice;\r\n        }\r\n        return {...row};\r\n    });\r\n}\r\n\r\nexport function getTotalPriceWithProfit(rows,itemNamesList,priceMap,changedFieldName){\r\n    var totalPriceAfterProfit=0;\r\n    rows.forEach((row)=>{\r\n        if(itemNamesList.includes(row.name)){\r\n            var marketPrice=parseInt(priceMap[row.name]);\r\n            if(changedFieldName && changedFieldName.includes(\"actualPrice\")){\r\n                totalPriceAfterProfit+=row.actualPrice*row.qty;\r\n            }\r\n            else{\r\n                totalPriceAfterProfit+=(marketPrice-((marketPrice*(row.profitPercent)/100)))*row.qty;\r\n            }\r\n        }\r\n    });\r\n    return totalPriceAfterProfit.toFixed();\r\n}","import { getEmptySentRow, getEmptyReceivedRow } from '../utils/ItemRowUtil'\r\nimport {\r\n    getUpdatedRowData,\r\n    getTotalPrice,\r\n    getTotalPriceWithProfit,\r\n    getUpdatedRowDataWithProfit,\r\n} from '../utils/PriceCalculatorUtil'\r\n\r\n/* methods common for both SentItemsComponent & ReceivedItemsComponent */\r\n\r\n\r\nexport function updateCash(componentContext, cashValue) {\r\n    componentContext.setState({\r\n        ...componentContext.state,\r\n        cash: parseInt(cashValue)\r\n    }, () => {\r\n        if (componentContext.state.type === \"RECEIVED\") {\r\n            triggerReceivedItemsDataUpdates(componentContext);\r\n        }\r\n        if (componentContext.state.type === \"SENT\") {\r\n            triggerSentItemsDataUpdates(componentContext);\r\n        }\r\n    });\r\n}\r\n\r\nexport function updateTypeAheadSelectedName(selectedItemName, rowId, componentContext) {\r\n    var itemName = selectedItemName[0];\r\n    componentContext.state.rows.forEach((row) => {\r\n        if (row.id === rowId) {\r\n            row.name = itemName;\r\n            row.mPrice = 0;\r\n            row.tPrice = 0;\r\n            if (row.itemProfit) {\r\n                row.itemProfit = 0;\r\n            }\r\n            if (row.actualPrice) {\r\n                row.actualPrice = 0;\r\n            }\r\n            if (row.actualTotalPrice) {\r\n                row.actualTotalPrice = 0;\r\n            }\r\n        }\r\n    });\r\n\r\n    if (componentContext.state.type === \"RECEIVED\") {\r\n        componentContext.props.updateReceivedItemsData(\r\n            componentContext.props.apiKey,\r\n            itemName,\r\n            componentContext.props.itemsStore,\r\n            componentContext,\r\n            //chance to update things once the asyc method 'updateReceivedItemsData' has finished\r\n            () => {\r\n                triggerReceivedItemsDataUpdates(componentContext);\r\n            });\r\n    }\r\n    if (componentContext.state.type === \"SENT\") {\r\n        componentContext.props.updateSentItemsData(\r\n            componentContext.props.apiKey,\r\n            itemName,\r\n            componentContext.props.itemsStore,\r\n            componentContext,\r\n            //chance to update things once the asyc method 'updateReceivedItemsData' has finished\r\n            () => {\r\n                triggerSentItemsDataUpdates(componentContext);\r\n            });\r\n    }\r\n\r\n}\r\n\r\n/* methods exclusive to ReceivedItemsComponent */\r\n\r\nexport function addRowInReceivedItems(componentContext) {\r\n    componentContext.state.rows.push(getEmptyReceivedRow());\r\n    componentContext.forceUpdate();\r\n    triggerReceivedItemsDataUpdates(componentContext);\r\n}\r\n\r\nexport function removeRowFromReceivedItems(currentRow, componentContext) {\r\n    componentContext.state.rows = componentContext.state.rows.filter((row) => {\r\n        return row.id !== currentRow.id;\r\n    });\r\n    componentContext.forceUpdate();\r\n    triggerReceivedItemsDataUpdates(componentContext);\r\n}\r\n\r\nexport function updateNumericInputInReceivedItems(event, componentContext) {\r\n    var fieldName = event.target.name.split(\"_\")[0];\r\n    var rowId = event.target.name.split(\"_\")[1];\r\n    var value = event.target.value;\r\n    value = value === 0 ? 0 : value;\r\n    componentContext.state.rows.forEach((row) => {\r\n        if (row.id === rowId) {\r\n            row[fieldName] = value;\r\n        }\r\n    });\r\n    componentContext.forceUpdate();\r\n    triggerReceivedItemsDataUpdates(componentContext, fieldName);\r\n}\r\n\r\n/* methods exclusive to SentItemsComponent */\r\n\r\nexport function addRowInSentItems(componentContext) {\r\n    componentContext.state.rows.push(getEmptySentRow());\r\n    componentContext.forceUpdate();\r\n    triggerSentItemsDataUpdates(componentContext);\r\n}\r\n\r\nexport function removeRowFromSentItems(currentRow, componentContext) {\r\n    componentContext.state.rows = componentContext.state.rows.filter((row) => {\r\n        return row.id !== currentRow.id;\r\n    });\r\n    componentContext.forceUpdate();\r\n    triggerSentItemsDataUpdates(componentContext);\r\n}\r\n\r\nexport function updateNumericInputInSentItems(event, componentContext) {\r\n    var fieldName = event.target.name.split(\"_\")[0];\r\n    var rowId = event.target.name.split(\"_\")[1];\r\n    var value = event.target.value;\r\n    value = value === 0 ? 0 : value;\r\n    componentContext.state.rows.forEach((row) => {\r\n        if (row.id === rowId) {\r\n            row[fieldName] = value;\r\n        }\r\n    });\r\n    componentContext.forceUpdate();\r\n    triggerSentItemsDataUpdates(componentContext);\r\n}\r\n\r\n//updates\r\nexport function triggerSentItemsDataUpdates(componentContext) {\r\n    var cashSentCash = parseInt(componentContext.state.cash === 0 || isNaN(componentContext.state.cash) ? 0 : componentContext.state.cash);\r\n    var updatedTotal = getTotalPrice(\r\n        componentContext.state.rows,\r\n        componentContext.props.itemNameList,\r\n        componentContext.props.priceMap\r\n    );\r\n    var updatedRows = getUpdatedRowData(\r\n        componentContext.state.rows,\r\n        componentContext.props.itemNameList,\r\n        componentContext.props.priceMap\r\n    );\r\n    //update the component's local variables that are mapped to the UI elements\r\n    updateLocalState(componentContext, updatedRows, updatedTotal);\r\n    //update the received items in redux's global store\r\n    componentContext.props.pushSentItemDetails(updatedRows, updatedTotal, cashSentCash);\r\n    //update the summary details in redux's global store\r\n    var totalValueOfCashAndItemsSent = cashSentCash + parseInt(updatedTotal);\r\n    var totalValueOfCashAndItemsReceived = parseInt(componentContext.props.received.totalActualPrice) + parseInt(componentContext.props.received.cash);\r\n    componentContext.props.pushTradeSummary(totalValueOfCashAndItemsReceived - totalValueOfCashAndItemsSent);\r\n}\r\n\r\nexport function triggerReceivedItemsDataUpdates(componentContext, changedFieldName) {\r\n    var cashReceivedCash = componentContext.state.cash === 0 || isNaN(componentContext.state.cash) ? 0 : componentContext.state.cash;\r\n    var updatedTotal = getTotalPrice(\r\n        componentContext.state.rows,\r\n        componentContext.props.itemNameList,\r\n        componentContext.props.priceMap\r\n    );\r\n    var updatedTotalActual = getTotalPriceWithProfit(\r\n        componentContext.state.rows,\r\n        componentContext.props.itemNameList,\r\n        componentContext.props.priceMap,\r\n        changedFieldName\r\n    );\r\n    var updatedRows = getUpdatedRowDataWithProfit(\r\n        componentContext.state.rows,\r\n        componentContext.props.itemNameList,\r\n        componentContext.props.priceMap,\r\n        changedFieldName\r\n    );\r\n    //update the component's local variables that are mapped to the UI elements\r\n    updateLocalState(componentContext, updatedRows, updatedTotal, updatedTotalActual);\r\n    //update the received items in redux's global store\r\n    componentContext.props.pushReceivedItemsDetail(updatedRows, updatedTotal, updatedTotalActual, cashReceivedCash);\r\n    //update the summary details in redux's global store\r\n    var totalValueOfCashAndItemsReceived = parseInt(updatedTotalActual) + cashReceivedCash;\r\n    var totalValueOfCashAndItemsSent = parseInt(componentContext.props.sent.total) + parseInt(componentContext.props.sent.cash);\r\n    componentContext.props.pushTradeSummary(totalValueOfCashAndItemsReceived - totalValueOfCashAndItemsSent);\r\n}\r\n\r\nfunction updateLocalState(componentContext, updatedRows, updatedTotal, totalPriceAfterProfit) {\r\n    if (totalPriceAfterProfit) {\r\n        componentContext.setState({\r\n            ...componentContext.state,\r\n            totalActualPrice: totalPriceAfterProfit,\r\n            totalPrice: updatedTotal,\r\n            rows: updatedRows\r\n        });\r\n    }\r\n    else {\r\n        componentContext.setState({\r\n            ...componentContext.state,\r\n            totalPrice: updatedTotal,\r\n            rows: updatedRows\r\n        });\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Button, Input, Modal, ModalHeader, ModalBody, ModalFooter, Container, Row, Col } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { fetchAllItemMetaData } from \"../actions/MarketItemsFetchAction\"\r\nimport { fetchPrice } from \"../actions/MarketPriceFetchAction\"\r\nimport { fetchUserName } from \"../actions/ProfileDetailsFetchAction\"\r\nimport { triggerSentItemsDataUpdates, triggerReceivedItemsDataUpdates } from '../helpers/ItemsComponentHelper'\r\nimport debugConsole from '../utils/ConsoleUtil'\r\nimport { getAllItemsAddedInTrade } from '../utils/ItemRowUtil'\r\n\r\nclass InitialiserComponent extends Component {\r\n\r\n  REFRESH_INTERVAL = 3000;\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      apiKey: props.apiKey,\r\n      isRefreshing: false,\r\n      currentItemNameForPriceRefresh: \"\"\r\n    }\r\n  }\r\n\r\n  updateApiKey = (event) => {\r\n    this.setState({ apiKey: event.target.value })\r\n    this.props.updateApiKeyInReduxStore(event.target.value);\r\n  }\r\n\r\n  saveApiKeyAndInit = () => {\r\n    if (!localStorage.getItem(\"MARKET_ITEMS\")) {\r\n      debugConsole(\"item details not found in cache; thus, calling the items api now!\");\r\n      this.props.updateMarketItemDetailsInReduxStore(this.state.apiKey);\r\n      this.props.updateUserNameInReduxStore(this.state.apiKey);\r\n    }\r\n    else {\r\n      debugConsole(\"item details already present\");\r\n    }\r\n  }\r\n\r\n  refreshPrices = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      isRefreshing: true\r\n    }, () => {\r\n      var componentContext = this;\r\n      var count = 0;\r\n      getAllItemsAddedInTrade(this.props).forEach((itemName) => {\r\n        if (this.props.priceMap[itemName] !== 0) {\r\n          count++;\r\n          setTimeout(function () {\r\n            debugConsole(\"currently refreshing : \" + itemName);\r\n            componentContext.refreshPrice(itemName);\r\n          }, componentContext.REFRESH_INTERVAL * count);\r\n        }\r\n      });\r\n      setTimeout(function () {\r\n        componentContext.setState({\r\n          ...componentContext.state,\r\n          isRefreshing: false,\r\n          currentItemNameForPriceRefresh: \"\"\r\n        });\r\n      }, componentContext.REFRESH_INTERVAL * (count + 1));\r\n    });\r\n  }\r\n\r\n  refreshPrice(itemName) {\r\n    this.setState({\r\n      ...this.state,\r\n      currentItemNameForPriceRefresh: itemName\r\n    }, () => {\r\n      this.props.refreshItemPriceInReduxStore(\r\n        this.props.apiKey,\r\n        itemName,\r\n        this.props.itemsStore,\r\n        this\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let btnName;\r\n    let btnColor;\r\n    if (this.props.loading) {\r\n      btnName = \"loading...\";\r\n      btnColor = \"info\";\r\n    }\r\n    else {\r\n      if (this.props.itemsStore === null || !this.props.itemsStore) {\r\n        btnName = \"Initialise\";\r\n        btnColor = \"primary\";\r\n      }\r\n      else {\r\n        btnName = \"Update API Key\";\r\n        btnColor = \"secondary\";\r\n      }\r\n    }\r\n    return (\r\n      <Container>\r\n        <br />\r\n        <Row>\r\n          <Col xs=\"auto\"><h4>Torn trade receipt generator</h4></Col>\r\n          <Col>\r\n            <Input type=\"text\" placeholder=\"Your API KEY goes here..\" value={this.props.apiKey === null ? \"\" : this.props.apiKey} onChange={this.updateApiKey} />\r\n          </Col>\r\n          <Col>\r\n            <Container>\r\n              <Row>\r\n                <Col>\r\n                  <Button color={btnColor} onClick={() => { this.saveApiKeyAndInit() }}>{btnName}</Button>\r\n                </Col>\r\n                <Col>\r\n                  <Button color=\"info\" onClick={this.refreshPrices}>Fetch Latest Prices</Button>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Modal isOpen={this.state.isRefreshing}>\r\n            <ModalHeader>Please wait</ModalHeader>\r\n            <ModalBody>\r\n              {this.state.currentItemNameForPriceRefresh === \"\" ?\r\n                <h6>Calling Torn API..</h6> :\r\n                <h6>Fetching the latest price of {this.state.currentItemNameForPriceRefresh}..</h6>}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </Row>\r\n        <br />\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n  return {\r\n    ...reduxState\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateMarketItemDetailsInReduxStore: function (apiKey) {\r\n      dispatch(fetchAllItemMetaData(apiKey))\r\n    },\r\n    updateApiKeyInReduxStore: function (apiKey) {\r\n      dispatch({ type: \"API_KEY_UPDATED\", payload: { apiKey } });\r\n    },\r\n    updateUserNameInReduxStore: function (apiKey) {\r\n      dispatch(fetchUserName(apiKey));\r\n    },\r\n    refreshItemPriceInReduxStore: function (apiKey, itemName, itemsStore, componentContext) {\r\n      dispatch(fetchPrice(apiKey, itemName, itemsStore, componentContext, true,\r\n        // updates to fire after price has been fetched\r\n        () => {\r\n          triggerReceivedItemsDataUpdates(componentContext.props.contexts.receivedItemComponentContext);\r\n          triggerSentItemsDataUpdates(componentContext.props.contexts.sentItemComponentContext);\r\n        }\r\n      ));\r\n    }\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InitialiserComponent);","/* eslint-disable react/no-direct-mutation-state */\r\n/* core imports */\r\nimport React, { Component } from \"react\"\r\nimport { connect } from 'react-redux';\r\n/* UI element imports */\r\nimport { Input, Row, Col, Table, Button, ButtonGroup, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\"\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\n/* custom import */\r\nimport { fetchPrice } from '../actions/MarketPriceFetchAction'\r\nimport {\r\n    isCurrentRowEmpty,\r\n    isItemListNotInitialised,\r\n    refinedOptions,\r\n    getFormattedCurrency\r\n} from '../utils/ItemRowUtil'\r\nimport {\r\n    updateTypeAheadSelectedName,\r\n    addRowInReceivedItems,\r\n    removeRowFromReceivedItems,\r\n    updateNumericInputInReceivedItems,\r\n    updateCash\r\n} from '../helpers/ItemsComponentHelper'\r\n\r\nclass ReceivedItemsComponent extends Component {\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            totalPrice: this.props.received.total,\r\n            totalActualPrice: this.props.received.totalActualPrice,\r\n            rows: this.props.received.items,\r\n            cash : 0,\r\n            forceRecalculation: false,\r\n            type: \"RECEIVED\"\r\n        }\r\n        props.updateContextInReduxStore(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Row>\r\n                    &nbsp;<h5>Received</h5>\r\n                </Row>\r\n                <Row>\r\n                    <Table id=\"receivedListTable\" borderless size=\"sm\">\r\n                        <thead>\r\n                            <tr style={{ \"fontSize\": \"0.85rem\" }}>\r\n                                <th>Item name</th>\r\n                                <th style={{ width: \"12%\" }}>Qty</th>\r\n                                <th>Market Price</th>\r\n                                <th>Your Price</th>\r\n                                <th>Total</th>\r\n                                <th style={{ width: \"12%\" }}>Profit %</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.rows.map((row, index) => {\r\n                                return (\r\n                                    <tr key={row.id}>\r\n                                        <td>\r\n                                            <Typeahead id={\"name_\" + row.id} maxResults={5} disabled={this.props.itemNameList === null} onChange={(selected) => { updateTypeAheadSelectedName(selected, row.id, this) }} options={refinedOptions(this.props, this.state.rows)} />\r\n                                        </td>\r\n                                        <td><Input type=\"number\" disabled={this.props.itemNameList === null} name={\"qty_\" + row.id} value={row.qty} onChange={(e) => { updateNumericInputInReceivedItems(e, this) }} min={0} /></td>\r\n                                        <td><Input type=\"number\" name={\"mPrice_\" + row.id} value={row.mPrice} disabled={true} /></td>\r\n                                        <td><Input type=\"number\" name={\"actualPrice_\" + row.id} value={row.actualPrice} onChange={(e) => { updateNumericInputInReceivedItems(e, this) }} max={row.mPrice} disabled={isCurrentRowEmpty(row) || isItemListNotInitialised(this.props)}/></td>\r\n                                        <td><Input type=\"number\" name={\"actualTotalPrice_\" + row.id} value={row.actualTotalPrice} disabled={true} /></td>\r\n                                        <td><Input type=\"number\" name={\"profitPercent_\" + row.id} value={row.profitPercent} onChange={(e) => { updateNumericInputInReceivedItems(e, this) }} /></td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <ButtonGroup>\r\n                                                    <Button size=\"sm\" color=\"success\" disabled={isCurrentRowEmpty(row) || isItemListNotInitialised(this.props)} onClick={() => { addRowInReceivedItems(this) }}>+</Button>\r\n                                                    <Button size=\"sm\" color=\"danger\" disabled={this.state.rows.length === 1 || isItemListNotInitialised(this.props)} onClick={() => { removeRowFromReceivedItems(row, this) }}>-</Button>\r\n                                                </ButtonGroup>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n                <hr/>\r\n                <Row>\r\n                    <Col>Total <b>market price</b> received: {getFormattedCurrency(this.state.totalPrice)}</Col>\r\n                    <Col>Total price at <b>your rate</b>: {getFormattedCurrency(this.state.totalActualPrice)}</Col>\r\n                </Row>\r\n                <hr/>\r\n                <Row>\r\n                    <Col xs=\"5\">\r\n                        <InputGroup>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText style={{ \"fontSize\": \".80rem\" }}>$ received</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input type=\"number\" value={this.state.cash} onChange={(e)=>{ updateCash(this, e.target.value)}}/>\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n    return {\r\n        ...reduxState\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n        updateContextInReduxStore: (componentContext) => {\r\n            dispatch({\r\n                type: \"RECEIVED_ITEM_COMPONENT_CONTEXT_UPDATED\", payload: {\r\n                    receivedItemComponentContext: componentContext\r\n                }\r\n            });\r\n        },\r\n\r\n        updateReceivedItemsData: (apiKey, itemName, itemsStore, componentContext, updatesCallback) => {\r\n            dispatch(fetchPrice(apiKey, itemName, itemsStore, componentContext, false, updatesCallback));\r\n        },\r\n\r\n        pushReceivedItemsDetail: (items, totalPrice, totalActualPrice, cashReceived) => {\r\n            dispatch({\r\n                type: 'UPDATE_RECEIVED_ITEMS', payload: {\r\n                    received: {\r\n                        items: items,\r\n                        total: totalPrice,\r\n                        totalActualPrice: totalActualPrice,\r\n                        cash : cashReceived\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        pushTradeSummary: (calculatedBalance) => {\r\n            dispatch({ type: \"UPDATE_TRADE_SUMMARY\", payload: { summary: { balance: calculatedBalance } } });\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReceivedItemsComponent);","/* eslint-disable react/no-direct-mutation-state */\r\n/* core imports */\r\nimport React, { Component } from \"react\"\r\nimport { connect } from 'react-redux';\r\n/* UI element imports */\r\nimport { Input, Row, Col, Table, Button, ButtonGroup, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\"\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\n/* custom import */\r\nimport { fetchPrice } from '../actions/MarketPriceFetchAction'\r\nimport { \r\n    isCurrentRowEmpty, \r\n    isItemListNotInitialised, \r\n    refinedOptions,\r\n    getFormattedCurrency } from '../utils/ItemRowUtil'\r\nimport {\r\n    updateTypeAheadSelectedName,\r\n    addRowInSentItems,\r\n    removeRowFromSentItems,\r\n    updateNumericInputInSentItems,\r\n    updateCash\r\n} from '../helpers/ItemsComponentHelper'\r\n\r\nclass SentItemsComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            totalPrice: this.props.sent.total,\r\n            rows: this.props.sent.items,\r\n            forceRecalculation: false,\r\n            cash : 0,\r\n            type: \"SENT\"\r\n        }\r\n        props.updateContextInReduxStore(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Row>\r\n                &nbsp;<h5>Sent</h5>\r\n                </Row>\r\n                <Row>\r\n                    <Table id=\"sentListTable\" borderless size=\"sm\">\r\n                        <thead>\r\n                        <tr style={{\"fontSize\":\"0.85rem\"}}>\r\n                                <th>Item name</th>\r\n                                <th style={{width:\"15%\"}}>Qty</th>\r\n                                <th>Market Price</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.rows.map((row, index) => {\r\n                                return (\r\n                                    <tr key={row.id}>\r\n                                        <td>\r\n                                            <Typeahead id={\"name_\" + row.id} maxResults={5} disabled={this.props.itemNameList === null} onChange={(selected) => { updateTypeAheadSelectedName(selected, row.id, this) }} options={refinedOptions(this.props, this.state.rows)} />\r\n                                        </td>\r\n                                        <td><Input type=\"number\" disabled={this.props.itemNameList === null} name={\"qty_\" + row.id} value={row.qty} onChange={(event) => { updateNumericInputInSentItems(event, this) }} min={0} /></td>\r\n                                        <td><Input type=\"number\" name={\"mPrice_\" + row.id} value={row.mPrice} disabled={true}/></td>\r\n                                        <td><Input type=\"number\" name={\"tPrice_\" + row.id} value={row.tPrice} disabled={true}/></td>\r\n                                        <td>\r\n                                                <ButtonGroup>\r\n                                                    <Button size=\"sm\" color=\"success\" disabled={isCurrentRowEmpty(row) || isItemListNotInitialised(this.props)} onClick={() => { addRowInSentItems(this) }}>+</Button>\r\n                                                    <Button size=\"sm\" color=\"danger\" disabled={this.state.rows.length === 1 || isItemListNotInitialised(this.props)} onClick={() => { removeRowFromSentItems(row, this) }}>-</Button>\r\n                                                </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n                <hr/>\r\n                <Row>\r\n                    <Col>Total <b>market price</b> of items: {getFormattedCurrency(this.state.totalPrice)}</Col>\r\n                </Row>\r\n                <hr/>\r\n                <Row>\r\n                    <Col xs=\"6\">\r\n                        <InputGroup>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText style={{ \"fontSize\": \".80rem\" }}>$ sent</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input type=\"number\" value={this.state.cash} onChange={(e)=>{ updateCash(this, e.target.value)}}/>\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n    return {\r\n        ...reduxState\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        \r\n        updateContextInReduxStore: (componentContext) => {\r\n            dispatch({\r\n                type: \"SENT_ITEM_COMPONENT_CONTEXT_UPDATED\", payload: {\r\n                    sentItemComponentContext: componentContext\r\n                }\r\n            });\r\n        },\r\n\r\n        updateSentItemsData: (apiKey, itemName, itemsStore, componentContext, updatesCallback) => {\r\n            dispatch(fetchPrice(apiKey, itemName, itemsStore, componentContext, false, updatesCallback));\r\n        },\r\n\r\n        pushSentItemDetails: (items, totalPrice,cashSent) => {\r\n            dispatch({\r\n                type: 'UPDATE_SENT_ITEMS', payload: {\r\n                    sent: {\r\n                        items: items,\r\n                        total: totalPrice,\r\n                        cash : cashSent\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        pushTradeSummary: (calculatedBalance) => {\r\n            dispatch({ type: \"UPDATE_TRADE_SUMMARY\", payload: { summary: { balance: calculatedBalance } } });\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SentItemsComponent);","import React, { Component } from \"react\"\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Container, Row, Col } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { sentAndReceivedItemsEmpty,getFormattedCurrency} from '../utils/ItemRowUtil'\r\nimport * as clipboard from \"clipboard-polyfill/text\";\r\n\r\nclass SummaryDetailComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            received: this.props.received,\r\n            sent: this.props.sent,\r\n            tradeSummary: this.props.tradeSummary,\r\n            isSummaryDialogOpen: false,\r\n            showCopiedButtonName: false,\r\n            forceRecalculation: false\r\n        }\r\n        props.updateContextInReduxStore(this);\r\n    }\r\n\r\n    toggleSummaryDialog = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            isSummaryDialogOpen: !this.state.isSummaryDialogOpen\r\n        })\r\n    }\r\n\r\n    copySummaryDataToClipboard = (event) => {\r\n        var context = this;\r\n        var textToCopy = document.getElementById(\"summaryText\").innerText;\r\n        clipboard.writeText(textToCopy).then(\r\n            function () {\r\n                context.setState({\r\n                    ...context.state,\r\n                    showCopiedButtonName: true\r\n                },\r\n                    () => {\r\n                        window.setTimeout(() => {\r\n                            context.setState({\r\n                                ...context.state,\r\n                                showCopiedButtonName: false\r\n                            })\r\n                        }, 1000)\r\n                    });\r\n\r\n            },\r\n            function () {\r\n                console.error(\"failed to copy!\");\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let btnColor;\r\n        let balanceText = \"\";\r\n        let balanceColor = \"green\";\r\n\r\n        if (this.props.itemsStore === null || !this.props.itemsStore) {\r\n            btnColor = \"secondary\";\r\n        }\r\n        else {\r\n            btnColor = \"primary\";\r\n        }\r\n        //user received less\r\n        if (this.props.tradeSummary.balance < 0) {\r\n            balanceText = this.props.tradeSummary.yourName + \" gets \" + getFormattedCurrency(this.props.tradeSummary.balance) + \".\";\r\n        }\r\n        //user received more\r\n        else if (this.props.tradeSummary.balance > 0) {\r\n            balanceColor = \"red\";\r\n            balanceText = this.props.tradeSummary.yourName + \" needs to send an additional \" + getFormattedCurrency(this.props.tradeSummary.balance) + \".\";\r\n        }\r\n        //balanced\r\n        else if (this.props.tradeSummary.balance === 0) {\r\n            balanceText = \"The trade is balanced.\";\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <h5 style={{ color: balanceColor }}>{balanceText}</h5>\r\n                    </Col>\r\n                    <Row>\r\n                        <Col>\r\n                            <Button\r\n                                color={btnColor}\r\n                                disabled={sentAndReceivedItemsEmpty(this.props)}\r\n                                onClick={this.toggleSummaryDialog}>\r\n                                Show Summary\r\n                            </Button>\r\n                            <Modal isOpen={this.state.isSummaryDialogOpen} toggle={this.toggleSummaryDialog}>\r\n                                <ModalHeader toggle={this.toggleSummaryDialog}>Trade Summary</ModalHeader>\r\n                                <ModalBody>\r\n                                    {sentAndReceivedItemsEmpty(this.props) ?\r\n                                        null :\r\n                                        (\r\n                                            <div id=\"summaryText\">\r\n                                                <div>\r\n                                                    <span style={{ \"textDecoration\": \"underline\" }}>\r\n                                                        {this.props.tradeSummary.yourName}\r\n                                                        {\" received the following items, \"}\r\n                                                        {\"worth \" }\r\n                                                        <span style={{ \"color\": \"green\" }}>{getFormattedCurrency(this.props.received.totalActualPrice)}</span>\r\n                                                        {\" in total\"}\r\n                                                    </span>\r\n                                                    <br />\r\n                                                </div>\r\n                                                <div>\r\n                                                    {this.props.received.items.map((row) => {\r\n                                                        return <span key={row.id}>\r\n                                                            <span style={{ \"fontWeight\": \"bold\" }}>{row.name}</span>\r\n                                                            <span style={{ \"color\": \"blue\" }}>{\" x\" + row.qty}</span>\r\n                                                            {\" at \"}\r\n                                                            <span style={{ \"color\": \"green\" }}>{getFormattedCurrency(row.actualPrice)}</span>\r\n                                                            {\"  each, \"}\r\n                                                            <span style={{ \"color\": \"green\" }}>{getFormattedCurrency(row.actualTotalPrice)}</span>\r\n                                                            {\" in total\"}<br />\r\n                                                        </span>\r\n                                                    })}\r\n                                                    <span style={{ \"color\": \"green\",\"fontWeight\": \"bold\" }}>{this.props.received.cash!==0?this.props.tradeSummary.yourName+\" also received \"+getFormattedCurrency(this.props.received.cash)+\" in cash\":\"\"}</span>\r\n                                                </div>\r\n                                                <span><br /></span>\r\n\r\n                                                <div>\r\n                                                    <span style={{ \"textDecoration\": \"underline\" }}>\r\n                                                        {this.props.tradeSummary.yourName}\r\n                                                        {\" sent the following items, \"}\r\n                                                        {\"worth \"}\r\n                                                        <span style={{ \"color\": \"green\" }}>{getFormattedCurrency(this.props.sent.total)}</span>\r\n                                                        {\" in total\"}\r\n                                                    </span>\r\n                                                    <br />\r\n                                                </div>\r\n                                                <div>\r\n                                                    {this.props.sent.items.map((row) => {\r\n                                                        return <span key={row.id}>\r\n                                                            <span style={{ \"fontWeight\": \"bold\" }}>{row.name}</span>\r\n                                                            <span style={{ \"color\": \"blue\" }}>{\" x\" + row.qty}</span>\r\n                                                            {\" at \"}\r\n                                                            <span style={{ \"color\": \"green\" }}>{getFormattedCurrency(row.mPrice)}</span>\r\n                                                            {\"  each, \"}\r\n                                                            <span style={{ \"color\": \"green\" }}>{getFormattedCurrency(row.tPrice)}</span>\r\n                                                            {\" in total\"}<br />\r\n                                                        </span>\r\n                                                    })}\r\n                                                    <span style={{ \"color\": \"green\",\"fontWeight\": \"bold\" }}>{this.props.sent.cash!==0?this.props.tradeSummary.yourName+\" also sent \"+getFormattedCurrency(this.props.sent.cash)+\" in cash\":\"\"}</span>\r\n                                                </div>\r\n                                                <span>----------------</span><br/>\r\n                                                <span style={{ \"fontWeight\": \"bold\" }}>{balanceText}</span>\r\n                                            </div>\r\n                                        )}\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                    <Button color=\"primary\" onClick={this.copySummaryDataToClipboard}>\r\n                                        {this.state.showCopiedButtonName ? \"Copied!\" : \"Copy To Clipboard\"}\r\n                                    </Button>{' '}\r\n                                    <Button color=\"secondary\" onClick={this.toggleSummaryDialog}>Cancel</Button>\r\n                                </ModalFooter>\r\n                            </Modal>\r\n                        </Col>\r\n                    </Row>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n    return {\r\n        ...reduxState\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateContextInReduxStore: (componentContext) => {\r\n            dispatch({\r\n                type: \"SUMMARY_DETAIL_COMPONENT_CONTEXT_UPDATED\", payload: {\r\n                    summaryDetailComponentContext: componentContext\r\n                }\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SummaryDetailComponent);","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\n\r\nclass FooterComponent extends Component {\r\n\r\n    render() {\r\n        return <Container>\r\n            <Col>\r\n                <Row>\r\n                    <br/>\r\n                </Row>\r\n                <Row>\r\n                    <span style={{ \"fontSize\": \"80%\" }}><i>\r\n                        If you think this tool is useful & want to <span style={{ \"textDecoration\":\"line-through\" }}>make me rich</span> donate, or if the tool is broken,\r\n                        please click&nbsp;<a href=\"https://www.torn.com/profiles.php?XID=2575642\">here</a>\r\n                    </i></span>\r\n                </Row>\r\n            </Col>\r\n        </Container>\r\n    }\r\n}\r\n\r\nexport default FooterComponent;","import React from 'react';\nimport InitialiserComponent from './components/InitialiserComponent'\nimport ReceivedItemsComponent from './components/ReceivedItemsComponent'\nimport SentItemsComponent from './components/SentItemsComponent'\nimport SummaryDetailComponent from './components/SummaryDetailComponent'\nimport FooterComponent from './components/FooterComponent'\nimport { Container, Row, Col } from 'reactstrap';\nimport './css/common.css'\nfunction App() {\n  return (\n    <Container >\n      <Row>\n        <InitialiserComponent/>\n      </Row>\n      <Row>\n        <Col xs=\"7\"><ReceivedItemsComponent/></Col>\n        <Col xs=\"5\"><SentItemsComponent/></Col>\n      </Row>\n      <hr/>\n      <Row>\n        <SummaryDetailComponent/>\n      </Row>\n      <Row>\n        <FooterComponent/>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;","export function populateDefaultPriceMap() {\r\n    if (localStorage.getItem(\"MARKET_ITEMS_SIMPLE\")) {\r\n        var itemNames = JSON.parse(localStorage.getItem(\"MARKET_ITEMS_SIMPLE\"));\r\n        var defaultPriceMap = {};\r\n        itemNames.forEach((itemName) => {\r\n            defaultPriceMap[itemName] = 0;\r\n        });\r\n        console.log(\"price map initialised successfully!\");\r\n        return defaultPriceMap;\r\n    }\r\n    else {\r\n        console.error(\"price map failed to initialise as no items metadata was found!\");\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport { populateDefaultPriceMap } from './utils/PriceMapGeneratorUtil'\nimport { getEmptySentRow,getEmptyReceivedRow } from './utils/ItemRowUtil'\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { logger } from 'redux-logger'\n\nconst mainReducer = function (\n\n  state = {\n    time: new Date(),\n    apiKey: localStorage.getItem(\"API_KEY\"),\n    received: {\n      items: [getEmptyReceivedRow()],\n      total: 0,\n      totalActualPrice: 0,\n      cash: 0\n    },\n    sent: {\n      items: [getEmptySentRow()],\n      total: 0,\n      cash: 0\n    },\n    tradeSummary: {\n      yourName: localStorage.getItem(\"YOUR_NAME\"),\n      theirName: \"\",\n      balance: 0\n    },\n    priceMap: populateDefaultPriceMap(),\n    loading: false,\n    apiErrorMsg: \"\",\n    apiCallSuccess: undefined,\n    itemsStore: JSON.parse(localStorage.getItem(\"MARKET_ITEMS\")),\n    itemNameList: JSON.parse(localStorage.getItem(\"MARKET_ITEMS_SIMPLE\")),\n    contexts:{\n      sentItemComponentContext:null,\n      receivedItemComponentContext:null,\n      summaryDetailComponentContext:null,\n    }\n  }, action) {\n\n  switch (action.type) {\n    case \"API_KEY_UPDATED\":\n      return {\n        ...state,\n        apiKey: action.payload.apiKey,\n        time: new Date()\n      };\n    case \"YOUR_NAME_UPDATED\":\n      return {\n        ...state,\n        tradeSummary: {\n          ...state.tradeSummary,\n          yourName: action.payload.yourName\n        },\n        time: new Date()\n      };\n    case \"MARKET_PRICE_FETCHED\":\n      var updatedPriceMap = { ...state.priceMap };\n      updatedPriceMap[action.payload.itemName] = action.payload.price;\n      return {\n        ...state,\n        priceMap: updatedPriceMap,\n        time: new Date()\n      };\n    case \"UPDATE_RECEIVED_ITEMS\":\n      return {\n        ...state,\n        received: action.payload.received,\n        apiCallSuccess: undefined,\n        loading: false,\n        time: new Date()\n      };\n    case \"UPDATE_SENT_ITEMS\":\n      return {\n        ...state,\n        sent: action.payload.sent,\n        apiCallSuccess: undefined,\n        loading: false,\n        time: new Date()\n      };\n    case \"UPDATE_TRADE_SUMMARY\":\n      return {\n        ...state,\n        tradeSummary: {\n          ...state.tradeSummary,\n          balance:action.payload.summary.balance\n        },\n        time: new Date()\n      };\n    case \"MARKET_ITEMS_FETCH_STARTED\":\n      return {\n        ...state,\n        loading: action.payload.loading,\n        apiCallSuccess: undefined,\n        time: new Date()\n      };\n    case \"MARKET_ITEMS_FETCH_SUCCESS\":\n      return {\n        ...state,\n        priceMap: populateDefaultPriceMap(),\n        loading: action.payload.loading,\n        itemsStore: action.payload.itemsStore,\n        itemNameList: action.payload.itemNameList,\n        apiCallSuccess: true,\n        time: new Date()\n      };\n    case \"API_CALL_FAILED\":\n      return {\n        ...state,\n        loading: action.payload.loading,\n        apiCallSuccess: false,\n        apiErrorMsg: action.payload.error,\n        time: new Date()\n      };\n      case \"SENT_ITEM_COMPONENT_CONTEXT_UPDATED\":\n        return {\n          ...state,\n          contexts: {\n            ...state.contexts,\n            sentItemComponentContext:action.payload.sentItemComponentContext\n          }\n        };\n        case \"RECEIVED_ITEM_COMPONENT_CONTEXT_UPDATED\":\n        return {\n          ...state,\n          contexts: {\n            ...state.contexts,\n            receivedItemComponentContext:action.payload.receivedItemComponentContext\n          }\n        };\n        case \"SUMMARY_DETAIL_COMPONENT_CONTEXT_UPDATED\":\n        return {\n          ...state,\n          contexts: {\n            ...state.contexts,\n            summaryDetailComponentContext:action.payload.summaryDetailComponentContext\n          }\n        };\n    default:\n      return state;\n  }\n};\n\nlet reduxStore;\nif (localStorage.getItem(\"debug\")) {\n  reduxStore = createStore(mainReducer, applyMiddleware(thunk, logger));\n}\nelse {\n  reduxStore = createStore(mainReducer, applyMiddleware(thunk));\n}\nconst ReactApp = () => (\n  <Provider store={reduxStore}>\n    <App />\n  </Provider>\n);\nReactDOM.render(<ReactApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}