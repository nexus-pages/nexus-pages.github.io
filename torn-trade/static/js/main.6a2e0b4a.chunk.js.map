{"version":3,"sources":["actions/MarketItemsFetchAction.js","actions/ProfileDetailsFetchAction.js","components/InitialiserComponent.js","actions/MarketPriceFetchAction.js","utils/PriceCalculatorUtil.js","utils/ItemRowUtil.js","utils/IdGeneratorUtil.js","helpers/ItemsComponentHelper.js","components/ReceivedItemsComponent.js","components/SentItemsComponent.js","components/SummaryDetailComponent.js","components/FooterComponent.js","App.js","utils/PriceMapGeneratorUtil.js","serviceWorker.js","index.js"],"names":["success","itemsStore","itemNameList","type","payload","loading","started","failed","error","yourName","InitialiserComponent","props","updateApiKey","event","setState","apiKey","target","value","updateApiKeyInReduxStore","saveApiKeyAndInit","localStorage","getItem","console","log","updateMarketItemDetailsInReduxStore","state","updateUserNameInReduxStore","btnName","btnColor","this","Container","Row","Col","Input","placeholder","onChange","Button","color","onClick","Component","connect","reduxState","apiCallSuccess","apiErrorMsg","dispatch","setItem","axios","get","then","res","idByName","nameById","Object","entries","data","items","forEach","key","itemId","parseInt","itemName","name","toLowerCase","includes","push","JSON","stringify","catch","err","message","fetchAllItemMetaData","fetchUserName","fetchPrice","componentContext","itemPriceUrl","bazaarPriceUrl","itemPricePromise","bazaarPricePromise","Promise","all","responses","itemMarketListings","itemmarket","privateBazaarListings","bazaar","bestItemMarketPrice","bestPrivateBazaarPrice","length","cost","pushReceivedItemsDetail","rows","totalPrice","pushSentItemDetails","errs","getUpdatedRowData","itemNamesList","priceMap","map","row","mPrice","tPrice","qty","getTotalPrice","areRowsEmpty","isEmpty","isCurrentRowEmpty","refinedOptions","filter","item","itemAlreadySelected","sentAndReceivedItemsEmpty","isItemListNotInitialised","sent","received","itemsNameList","IdGenerator","crypto","toString","updateTypeAheadSelectedName","selectedItemName","rowId","id","forceRecalculation","fetchItemPrice","ReceivedItemsComponent","total","prevProps","prevState","Table","index","maxResults","disabled","selected","options","fieldName","split","forceUpdate","updateQtyInReceivedItems","min","ButtonGroup","currentRow","SentItemsComponent","updateQtyInSentItems","SummaryDetailComponent","toggleSummaryDialog","isSummaryDialogOpen","copySummaryDataToClipboard","context","textToCopy","document","getElementById","innerText","clipboard","showCopiedButtonName","window","setTimeout","tradeSummary","balance","pushTradeSummary","balanceText","balanceColor","style","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","calculatedBalance","summary","FooterComponent","href","App","populateDefaultPriceMap","itemNames","parse","defaultPriceMap","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reduxStore","mainReducer","time","Date","theirName","undefined","action","updatedPriceMap","price","createStore","applyMiddleware","thunk","logger","ReactApp","store","ReactDOM","render","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6a2e0b4a.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const fetchAllItemMetaData = (apiKey) => {\r\n  localStorage.setItem(\"API_KEY\",apiKey);\r\n  return dispatch => {\r\n    dispatch(started());\r\n    axios.get(\"https://api.torn.com/torn/?selections=items&key=\" + apiKey)\r\n      .then(res => {\r\n        var itemNameList = [];\r\n        var itemsStore = {\r\n          idByName: {},\r\n          nameById: {}\r\n        };\r\n        Object.entries(res.data.items).forEach(([key, value]) => {\r\n          var itemId = parseInt(key);\r\n          var itemName = value.name;\r\n          var isIllegalItemName=itemName.toLowerCase().includes(\"undefined\");\r\n          if(!isIllegalItemName){\r\n            itemsStore.idByName[itemName] = itemId;\r\n            itemsStore.nameById[itemId] = itemName;\r\n            itemNameList.push(itemName);\r\n          }\r\n        });\r\n        localStorage.setItem(\"MARKET_ITEMS\", JSON.stringify(itemsStore))\r\n        localStorage.setItem(\"MARKET_ITEMS_SIMPLE\", JSON.stringify(itemNameList))\r\n        dispatch(success(itemsStore, itemNameList));\r\n      })\r\n      .catch(err => {\r\n        dispatch(failed(err.message));\r\n      });\r\n  };\r\n};\r\n\r\nconst success = (itemsStore, itemNameList) => ({\r\n  type: \"MARKET_ITEMS_FETCH_SUCCESS\",\r\n  payload: {\r\n    loading: false,\r\n    itemsStore: { ...itemsStore },\r\n    itemNameList: [...itemNameList]\r\n  }\r\n});\r\n\r\nconst started = () => ({\r\n  type: \"MARKET_ITEMS_FETCH_STARTED\",\r\n  payload: {\r\n    loading: true\r\n  }\r\n});\r\n\r\nconst failed = (error) => ({\r\n  type: \"API_CALL_FAILED\",\r\n  payload: {\r\n    error,\r\n    loading: false\r\n  }\r\n});","import axios from 'axios';\r\n\r\nexport const fetchUserName = (apiKey) => {\r\n  return dispatch => {\r\n    axios.get(\"https://api.torn.com/user/?selections=profile&key=\"+apiKey)\r\n      .then(res => {\r\n        var yourName=res.data.name;\r\n        localStorage.setItem(\"YOUR_NAME\",yourName);\r\n        dispatch(success(yourName));\r\n      })\r\n      .catch(err => {\r\n        dispatch(failed(err.message));\r\n      });\r\n  };\r\n};\r\n\r\nconst success = (yourName) => ({\r\n  type: \"YOUR_NAME_UPDATED\",\r\n  payload: {\r\n    loading: false,\r\n    yourName\r\n  }\r\n});\r\n\r\nconst failed = (error) => ({\r\n  type: \"API_CALL_FAILED\",\r\n  payload: {\r\n    error,\r\n    loading: false\r\n  }\r\n});","import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { Input } from \"reactstrap\";\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { fetchAllItemMetaData } from \"../actions/MarketItemsFetchAction\"\r\nimport { fetchUserName } from \"../actions/ProfileDetailsFetchAction\"\r\n\r\nclass InitialiserComponent extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      apiKey: props.apiKey\r\n    }\r\n  }\r\n\r\n  updateApiKey = (event) => {\r\n    this.setState({ apiKey: event.target.value })\r\n    this.props.updateApiKeyInReduxStore(event.target.value);\r\n  }\r\n\r\n  saveApiKeyAndInit = () => {\r\n    if (!localStorage.getItem(\"MARKET_ITEMS\")) {\r\n      console.log(\"item details not found in cache; thus, calling the items api now!\");\r\n      this.props.updateMarketItemDetailsInReduxStore(this.state.apiKey);\r\n      this.props.updateUserNameInReduxStore(this.state.apiKey);\r\n    }\r\n    else {\r\n      console.log(\"item details already present\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let btnName;\r\n    let btnColor;\r\n    if (this.props.loading) {\r\n      btnName = \"loading...\";\r\n      btnColor = \"info\";\r\n    }\r\n    else {\r\n      if (this.props.itemsStore === null || !this.props.itemsStore) {\r\n        btnName = \"Initialise\";\r\n        btnColor = \"primary\";\r\n      }\r\n      else {\r\n        btnName = \"Update\";\r\n        btnColor = \"secondary\";\r\n      }\r\n    }\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <hr></hr>\r\n        </Row>\r\n        <Row>\r\n          <Col><h4>Torn barter receipt generator</h4></Col>\r\n          <Col>\r\n            <Input type=\"text\" placeholder=\"Your API KEY goes here..\" value={this.props.apiKey === null ? \"\" : this.props.apiKey} onChange={this.updateApiKey} />\r\n          </Col>\r\n          <Col>\r\n            <Button color={btnColor} onClick={() => { this.saveApiKeyAndInit() }}>{btnName}</Button>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <hr></hr>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n  return {\r\n    apiKey: reduxState.apiKey,\r\n    loading: reduxState.loading,\r\n    apiCallSuccess: reduxState.apiCallSuccess,\r\n    apiErrorMsg: reduxState.apiErrorMsg,\r\n    itemsStore: reduxState.itemsStore\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateMarketItemDetailsInReduxStore: function (apiKey) {\r\n      dispatch(fetchAllItemMetaData(apiKey))\r\n    },\r\n    updateApiKeyInReduxStore: function (apiKey) {\r\n      dispatch({ type: \"API_KEY_UPDATED\", payload: { apiKey } });\r\n    },\r\n    updateUserNameInReduxStore: function (apiKey) {\r\n      dispatch(fetchUserName(apiKey));\r\n    }\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InitialiserComponent);","import axios from 'axios';\r\n\r\nexport const fetchPrice = (apiKey, itemName, itemsStore, componentContext) => {\r\n  return (dispatch) => {\r\n    var itemId = itemsStore.idByName[itemName];\r\n    var itemPriceUrl = \"https://api.torn.com/market/\" + itemId + \"?selections=itemmarket&key=\" + apiKey;\r\n    var bazaarPriceUrl = \"https://api.torn.com/market/\" + itemId + \"?selections=bazaar&key=\" + apiKey;\r\n\r\n    var itemPricePromise = axios.get(itemPriceUrl);\r\n    var bazaarPricePromise = axios.get(bazaarPriceUrl);\r\n    Promise.all([itemPricePromise, bazaarPricePromise]).then((responses) => {\r\n      console.log(responses)\r\n      var itemMarketListings = responses[0].data.itemmarket;\r\n      var privateBazaarListings = responses[1].data.bazaar;\r\n      var bestPriceAvailable = 0;\r\n      var bestItemMarketPrice = 0;\r\n      var bestPrivateBazaarPrice = 0;\r\n      if (itemMarketListings !== null && itemMarketListings.length > 0 && itemMarketListings[0].cost !== null) {\r\n        bestItemMarketPrice = itemMarketListings[0].cost;\r\n      }\r\n      if (privateBazaarListings !== null && privateBazaarListings.length > 0 && privateBazaarListings[0].cost !== null) {\r\n        bestPrivateBazaarPrice = privateBazaarListings[0].cost;\r\n      }\r\n\r\n      //best price out of bazaar & market\r\n      bestPriceAvailable = bestPrivateBazaarPrice < bestItemMarketPrice ? bestPrivateBazaarPrice : bestItemMarketPrice;\r\n      \r\n      dispatch({ type: 'MARKET_PRICE_FETCHED', payload: { \"price\": bestPriceAvailable, \"itemName\": itemName } });\r\n\r\n      if (componentContext.state.type === \"RECEIVED\") {\r\n        componentContext.props.pushReceivedItemsDetail(componentContext.state.rows, componentContext.state.totalPrice);\r\n      }\r\n      if (componentContext.state.type === \"SENT\") {\r\n        componentContext.props.pushSentItemDetails(componentContext.state.rows, componentContext.state.totalPrice);\r\n      }\r\n\r\n    }).catch((errs) => {\r\n      console.error(JSON.stringify(errs));\r\n      errs.forEach(err => {\r\n        dispatch(failed(err));\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nconst failed = (error) => ({\r\n  type: \"API_CALL_FAILED\",\r\n  payload: {\r\n    error,\r\n    loading: false\r\n  }\r\n});","export function getUpdatedRowData(rows,itemNamesList,priceMap){\r\n    return rows.map((row)=>{\r\n        if(itemNamesList.includes(row.name)){\r\n            //update mPrice\r\n            row.mPrice=priceMap[row.name];\r\n            //update tPrice\r\n            row.tPrice=row.qty*row.mPrice;\r\n        }\r\n        return {...row};\r\n    });\r\n}\r\n\r\nexport function getTotalPrice(rows,itemNamesList,priceMap){\r\n    var totalPrice=0;\r\n    rows.forEach((row)=>{\r\n        if(itemNamesList.includes(row.name)){\r\n            totalPrice+=priceMap[row.name]*row.qty;\r\n        }\r\n    });\r\n    return totalPrice;\r\n}","export function areRowsEmpty(rows) {\r\n    var isEmpty = false;\r\n    rows.forEach(row => {\r\n        if (isCurrentRowEmpty(row)) {\r\n            isEmpty = true;\r\n            return;\r\n        }\r\n    });\r\n    return isEmpty;\r\n}\r\n\r\nexport function refinedOptions(props,rows){\r\n    if(props.itemNameList===null){\r\n        return [];\r\n    }\r\n    var refinedList=props.itemNameList.filter( item =>{\r\n        var itemAlreadySelected=false;\r\n        rows.forEach((row)=>{\r\n            if(row.name===item){\r\n                itemAlreadySelected=true;\r\n               return; \r\n            }\r\n        });\r\n        return !itemAlreadySelected;\r\n    });\r\n    return refinedList;\r\n}\r\n\r\nexport function sentAndReceivedItemsEmpty(props){\r\n    return   isItemListNotInitialised(props)\r\n            || areRowsEmpty(props.sent.items) \r\n            || areRowsEmpty(props.received.items);\r\n}\r\n\r\nexport function isCurrentRowEmpty(row){\r\n    return row.name === \"\" || row.mPrice===0 || row.qty===0;\r\n}\r\n\r\nexport function isItemListNotInitialised(props){\r\n    return props.itemsNameList === null;\r\n}","import * as crypto from \"crypto\";\r\n\r\nexport function IdGenerator(){\r\n    return crypto.randomBytes(16).toString(\"base64\")\r\n}","import { IdGenerator } from '../utils/IdGeneratorUtil'\r\n\r\n/* methods common for both SentItemsComponent & ReceivedItemsComponent */\r\n\r\nexport function updateTypeAheadSelectedName(selectedItemName, rowId, componentContext) {\r\n    var itemName = selectedItemName[0];\r\n    componentContext.state.rows.forEach((row) => {\r\n        if (row.id === rowId) {\r\n            row.name = itemName;\r\n            row.mPrice=0;\r\n            row.tPrice=0;\r\n        }\r\n    });\r\n    componentContext.state.forceRecalculation = true;\r\n    componentContext.props.fetchItemPrice(\r\n        componentContext.props.apiKey, \r\n        itemName, \r\n        componentContext.props.itemsStore,\r\n        componentContext);\r\n}\r\n\r\n/* methods exclusive to ReceivedItemsComponent */\r\n\r\nexport function addRowInReceivedItems(componentContext){\r\n    componentContext.state.rows.push({\r\n        id: IdGenerator(),\r\n        name: \"\",\r\n        qty: 0,\r\n        mPrice: 0,\r\n        tPrice: 0\r\n    })\r\n    componentContext.forceUpdate();\r\n    componentContext.props.pushReceivedItemsDetail(componentContext.state.rows,componentContext.state.totalPrice);\r\n}\r\n\r\nexport function removeRowFromReceivedItems (currentRow,componentContext) {\r\n    componentContext.state.rows = componentContext.state.rows.filter((row) => {\r\n        return row.id !== currentRow.id;\r\n    });\r\n    componentContext.state.forceRecalculation=true;\r\n    componentContext.forceUpdate();\r\n    componentContext.props.pushReceivedItemsDetail(componentContext.state.rows,componentContext.state.totalPrice);\r\n}\r\n\r\nexport function updateQtyInReceivedItems(event,componentContext){\r\n    var fieldName = event.target.name.split(\"_\")[0];\r\n    var rowId = event.target.name.split(\"_\")[1];\r\n    var value = event.target.value;\r\n    componentContext.state.rows.forEach((row) => {\r\n        if (row.id === rowId) {\r\n            row[fieldName] = value;\r\n        }\r\n    });\r\n    componentContext.state.forceRecalculation=true;\r\n    componentContext.forceUpdate();\r\n    componentContext.props.pushReceivedItemsDetail(componentContext.state.rows,componentContext.state.totalPrice);\r\n}\r\n\r\n/* methods exclusive to SentItemsComponent */\r\n\r\nexport function addRowInSentItems(componentContext){\r\n    componentContext.state.rows.push({\r\n        id: IdGenerator(),\r\n        name: \"\",\r\n        qty: 0,\r\n        mPrice: 0,\r\n        tPrice: 0\r\n    })\r\n    componentContext.forceUpdate();\r\n    componentContext.props.pushSentItemDetails(componentContext.state.rows, componentContext.state.totalPrice);\r\n}\r\n\r\nexport function removeRowFromSentItems(currentRow,componentContext){\r\n    componentContext.state.rows = componentContext.state.rows.filter((row) => {\r\n        return row.id !== currentRow.id;\r\n    });\r\n    componentContext.state.forceRecalculation = true;\r\n    componentContext.forceUpdate();\r\n    componentContext.props.pushSentItemDetails(componentContext.state.rows, componentContext.state.totalPrice);\r\n}\r\n\r\nexport function updateQtyInSentItems(event,componentContext){\r\n    var fieldName = event.target.name.split(\"_\")[0];\r\n    var rowId = event.target.name.split(\"_\")[1];\r\n    var value = event.target.value;\r\n    componentContext.state.rows.forEach((row) => {\r\n        if (row.id === rowId) {\r\n            row[fieldName] = value;\r\n        }\r\n    });\r\n    componentContext.state.forceRecalculation = true;\r\n    componentContext.forceUpdate();\r\n    componentContext.props.pushSentItemDetails(componentContext.state.rows, componentContext.state.totalPrice);\r\n}","/* eslint-disable react/no-direct-mutation-state */\r\n/* core imports */\r\nimport React, { Component } from \"react\"\r\nimport { connect } from 'react-redux';\r\n/* UI element imports */\r\nimport { Input,Container, Row, Col,Table, Button, ButtonGroup  } from \"reactstrap\"\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\n/* custom import */\r\nimport { fetchPrice } from '../actions/MarketPriceFetchAction'\r\nimport { getUpdatedRowData, getTotalPrice } from '../utils/PriceCalculatorUtil'\r\nimport { isCurrentRowEmpty,isItemListNotInitialised,refinedOptions } from '../utils/ItemRowUtil'\r\nimport { \r\n    updateTypeAheadSelectedName,\r\n    addRowInReceivedItems,\r\n    removeRowFromReceivedItems,\r\n    updateQtyInReceivedItems \r\n} from '../helpers/ItemsComponentHelper'\r\n\r\nclass ReceivedItemsComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            totalPrice: this.props.received.total,\r\n            rows: this.props.received.items,\r\n            forceRecalculation:false,\r\n            type:\"RECEIVED\"\r\n        }\r\n    }\r\n\r\n    //update the market price in the array after API has fetched the price in the priceMap\r\n    componentDidUpdate(prevProps,prevState) {\r\n        console.log(\"ReceivedItemsComponent updated()\");\r\n        if(prevState.forceRecalculation){\r\n            this.setState({\r\n                totalPrice:getTotalPrice(prevState.rows,prevProps.itemNameList,prevProps.priceMap),\r\n                rows:getUpdatedRowData(prevState.rows,prevProps.itemNameList,prevProps.priceMap),\r\n                forceRecalculation:false\r\n            });\r\n            this.props.pushReceivedItemsDetail(this.state.rows,this.state.totalPrice);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col><h4>Received</h4></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Table id=\"receivedListTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Item name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Best Price</th>\r\n                                <th>Total Price</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.rows.map((row, index) => {\r\n                                return (\r\n                                    <tr key={row.id}>\r\n                                        <td>\r\n                                            <Typeahead id={\"name_\" + row.id} maxResults={5} disabled={this.props.itemNameList === null} onChange={(selected) => { updateTypeAheadSelectedName(selected, row.id, this) }} options={refinedOptions(this.props,this.state.rows)} />\r\n                                        </td>\r\n                                        <td><Input type=\"number\" disabled={this.props.itemNameList === null} name={\"qty_\" + row.id} value={row.qty} onChange={(event)=>{updateQtyInReceivedItems(event,this)}} min={0} /></td>\r\n                                        <td><Input type=\"number\" name={\"mPrice_\" + row.id} value={row.mPrice} disabled={true} /></td>\r\n                                        <td><Input type=\"number\" name={\"tPrice_\" + row.id} value={row.tPrice} disabled={true} /></td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <ButtonGroup>\r\n                                                    <Button color=\"success\" disabled={isCurrentRowEmpty(row) || isItemListNotInitialised(this.props)} onClick={() => { addRowInReceivedItems(this) }}>+</Button>\r\n                                                    <Button color=\"danger\" disabled={this.state.rows.length===1 || isItemListNotInitialised(this.props)} onClick={() => { removeRowFromReceivedItems(row,this) }}>-</Button>\r\n                                                </ButtonGroup>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n                <Row>\r\n                    <Col>Total market price of items received: {this.state.totalPrice}</Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n    return {\r\n        ...reduxState\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        pushReceivedItemsDetail: (items,totalPrice) => {\r\n            dispatch({ type: 'UPDATE_RECEIVED_ITEMS', payload: { \r\n                received: {   \r\n                    items: items,\r\n                    total: totalPrice\r\n                } }\r\n            });\r\n        },\r\n        fetchItemPrice: (apiKey,itemName,itemsStore,componentContext) => {\r\n            dispatch(fetchPrice(apiKey,itemName,itemsStore,componentContext));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReceivedItemsComponent);","/* eslint-disable react/no-direct-mutation-state */\r\n/* core imports */\r\nimport React, { Component } from \"react\"\r\nimport { connect } from 'react-redux';\r\n/* UI element imports */\r\nimport { Input, Container, Row, Col, Table, Button, ButtonGroup } from \"reactstrap\"\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\n/* custom import */\r\nimport { fetchPrice } from '../actions/MarketPriceFetchAction'\r\nimport { getUpdatedRowData, getTotalPrice } from '../utils/PriceCalculatorUtil'\r\nimport { isCurrentRowEmpty,isItemListNotInitialised,refinedOptions } from '../utils/ItemRowUtil'\r\nimport {\r\n    updateTypeAheadSelectedName,\r\n    addRowInSentItems,\r\n    removeRowFromSentItems,\r\n    updateQtyInSentItems\r\n} from '../helpers/ItemsComponentHelper'\r\n\r\nclass SentItemsComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            totalPrice: this.props.sent.total,\r\n            rows: this.props.sent.items,\r\n            forceRecalculation: false,\r\n            type:\"SENT\"\r\n        }\r\n    }\r\n\r\n    //update the market price in the array after API has fetched the price in the priceMap\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(\"SentItemsComponent updated()\");\r\n        if (prevState.forceRecalculation) {\r\n            this.setState({\r\n                totalPrice: getTotalPrice(prevState.rows, prevProps.itemNameList, prevProps.priceMap),\r\n                rows: getUpdatedRowData(prevState.rows, prevProps.itemNameList, prevProps.priceMap),\r\n                forceRecalculation: false\r\n            });\r\n            this.props.pushSentItemDetails(this.state.rows, this.state.totalPrice);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col><h4>Sent</h4></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Table id=\"sentListTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Item name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Best Price</th>\r\n                                <th>Total Price</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.rows.map((row, index) => {\r\n                                return (\r\n                                    <tr key={row.id}>\r\n                                        <td>\r\n                                            <Typeahead id={\"name_\" + row.id} maxResults={5} disabled={this.props.itemNameList === null} onChange={(selected) => { updateTypeAheadSelectedName(selected, row.id, this) }} options={refinedOptions(this.props,this.state.rows)} />\r\n                                        </td>\r\n                                        <td><Input type=\"number\" disabled={this.props.itemNameList === null} name={\"qty_\" + row.id} value={row.qty} onChange={(event) => { updateQtyInSentItems(event, this) }} min={0} /></td>\r\n                                        <td><Input type=\"number\" name={\"mPrice_\" + row.id} value={row.mPrice} disabled={true} /></td>\r\n                                        <td><Input type=\"number\" name={\"tPrice_\" + row.id} value={row.tPrice} disabled={true} /></td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <ButtonGroup>\r\n                                                    <Button color=\"success\" disabled={isCurrentRowEmpty(row) || isItemListNotInitialised(this.props)} onClick={() => { addRowInSentItems(this) }}>+</Button>\r\n                                                    <Button color=\"danger\" disabled={this.state.rows.length===1 || isItemListNotInitialised(this.props)} onClick={() => { removeRowFromSentItems(row, this) }}>-</Button>\r\n                                                </ButtonGroup>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </Row>\r\n                <Row>\r\n                    <Col>Total market price of items sent: {this.state.totalPrice}</Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n    return {\r\n        apiKey: reduxState.apiKey,\r\n        itemNameList: reduxState.itemNameList,\r\n        sent: reduxState.sent,\r\n        itemsStore: reduxState.itemsStore,\r\n        priceMap: reduxState.priceMap\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        pushSentItemDetails: (items, totalPrice) => {\r\n            dispatch({\r\n                type: 'UPDATE_SENT_ITEMS', payload: {\r\n                    sent: {\r\n                        items: items,\r\n                        total: totalPrice\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        fetchItemPrice: (apiKey, itemName, itemsStore,componentContext) => {\r\n            dispatch(fetchPrice(apiKey, itemName, itemsStore,componentContext));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SentItemsComponent);","import React, { Component } from \"react\"\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Container, Row, Col } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { sentAndReceivedItemsEmpty } from '../utils/ItemRowUtil'\r\nimport * as clipboard from \"clipboard-polyfill/text\";\r\n\r\nclass SummaryDetailComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            received: this.props.received,\r\n            sent: this.props.sent,\r\n            tradeSummary: this.props.tradeSummary,\r\n            isSummaryDialogOpen: false,\r\n            showCopiedButtonName: false\r\n        }\r\n    }\r\n\r\n    toggleSummaryDialog = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            isSummaryDialogOpen: !this.state.isSummaryDialogOpen\r\n        })\r\n    }\r\n\r\n    copySummaryDataToClipboard = (event) => {\r\n        var context = this;\r\n        var textToCopy = document.getElementById(\"summaryText\").innerText;\r\n        clipboard.writeText(textToCopy).then(\r\n            function () {\r\n                context.setState({\r\n                    ...context.state,\r\n                    showCopiedButtonName: true\r\n                },\r\n                    () => {\r\n                        window.setTimeout(() => {\r\n                            context.setState({\r\n                                ...context.state,\r\n                                showCopiedButtonName: false\r\n                            })\r\n                        }, 1000)\r\n                    });\r\n\r\n            },\r\n            function () {\r\n                console.error(\"failed to copy!\");\r\n            }\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(\"BalanceDetailComponent updated()\");\r\n        if ((this.props.received.total - this.props.sent.total) !== this.props.tradeSummary.balance) {\r\n            this.props.pushTradeSummary(this.props.received.total - this.props.sent.total);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let btnColor;\r\n        let balanceText = \"\";\r\n        let balanceColor = \"green\";\r\n\r\n        if (this.props.itemsStore === null || !this.props.itemsStore) {\r\n            btnColor = \"secondary\";\r\n        }\r\n        else {\r\n            btnColor = \"primary\";\r\n        }\r\n        //user received less\r\n        if (this.props.tradeSummary.balance < 0) {\r\n            balanceText = this.props.tradeSummary.yourName + \" gets $\" + this.props.tradeSummary.balance + \".\";\r\n        }\r\n        //user received more\r\n        else if (this.props.tradeSummary.balance > 0) {\r\n            balanceColor = \"red\";\r\n            balanceText = this.props.tradeSummary.yourName + \" needs to send an additional $\" + this.props.tradeSummary.balance + \".\";\r\n        }\r\n        //balanced\r\n        else if (this.props.tradeSummary.balance === 0) {\r\n            balanceText = \"The trade is balanced.\";\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <h5 style={{ color: balanceColor }}>{balanceText}</h5>\r\n                    </Col>\r\n                    <Row>\r\n                        <Col>\r\n                            <Button\r\n                                color={btnColor}\r\n                                disabled={sentAndReceivedItemsEmpty(this.props)}\r\n                                onClick={this.toggleSummaryDialog}>\r\n                                Show Summary\r\n                            </Button>\r\n                            <Modal isOpen={this.state.isSummaryDialogOpen} toggle={this.toggleSummaryDialog}>\r\n                                <ModalHeader toggle={this.toggleSummaryDialog}>Trade Summary</ModalHeader>\r\n                                <ModalBody>\r\n                                    {sentAndReceivedItemsEmpty(this.props) ?\r\n                                        null :\r\n                                        (\r\n                                            <div id=\"summaryText\">\r\n                                                <div>\r\n                                                    <span>\r\n                                                        {this.props.tradeSummary.yourName}\r\n                                                        {\" sent the following items, \"}\r\n                                                        {\"worth $\" + this.props.sent.total+\" in total\"}\r\n                                                    </span>\r\n                                                    <br/><span>--------------------------------------------------------------------</span>\r\n                                                </div>\r\n                                                <div>\r\n                                                {this.props.sent.items.map((row) => {\r\n                                                    return <span key={row.id}>\r\n                                                            <span style={{\"font-weight\":\"bold\"}}>{row.name}</span>\r\n                                                            <span style={{\"color\":\"blue\"}}>{\" x\"+row.qty}</span>\r\n                                                            {\" at $\"}\r\n                                                            <span style={{\"color\":\"green\"}}>{row.mPrice}</span>\r\n                                                            {\"  each, $\"}\r\n                                                            <span style={{\"color\":\"green\"}}>{row.tPrice}</span>\r\n                                                            {\" in total\"}<br/>\r\n                                                            </span>\r\n                                                })}\r\n                                                </div>\r\n                                                <span><br/></span>\r\n                                                <div>\r\n                                                    <span>\r\n                                                        {this.props.tradeSummary.yourName}\r\n                                                        {\" received the following items, \"}\r\n                                                        {\"worth $\" + this.props.received.total+\" in total\"}\r\n                                                    </span>\r\n                                                    <br/><span>--------------------------------------------------------------------</span>\r\n                                                </div>\r\n                                                <div>\r\n                                                {this.props.received.items.map((row) => {\r\n                                                    return <span key={row.id}>\r\n                                                    <span style={{\"font-weight\":\"bold\"}}>{row.name}</span>\r\n                                                    <span style={{\"color\":\"blue\"}}>{\" x\"+row.qty}</span>\r\n                                                    {\" at $\"}\r\n                                                    <span style={{\"color\":\"green\"}}>{row.mPrice}</span>\r\n                                                    {\"  each, $\"}\r\n                                                    <span style={{\"color\":\"green\"}}>{row.tPrice}</span>\r\n                                                    {\" in total\"}<br/>\r\n                                                    </span>\r\n                                                })}\r\n                                                </div>\r\n                                                <span style={{\"font-weight\":\"bold\"}}>{balanceText}</span>\r\n                                            </div>\r\n                                        )}\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                    <Button color=\"primary\" onClick={this.copySummaryDataToClipboard}>\r\n                                        {this.state.showCopiedButtonName ? \"Copied!\" : \"Copy To Clipboard\"}\r\n                                    </Button>{' '}\r\n                                    <Button color=\"secondary\" onClick={this.toggleSummaryDialog}>Cancel</Button>\r\n                                </ModalFooter>\r\n                            </Modal>\r\n                        </Col>\r\n                    </Row>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n/* mapping for redux */\r\nconst mapStateToProps = (reduxState) => {\r\n    return {\r\n        ...reduxState\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        pushTradeSummary: (calculatedBalance) => {\r\n            dispatch({ type: \"UPDATE_TRADE_SUMMARY\", payload: { summary: { balance: calculatedBalance } } });\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SummaryDetailComponent);","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\n\r\nclass FooterComponent extends Component {\r\n\r\n    render() {\r\n        return <Container>\r\n            <Col>\r\n                <Row>\r\n                    <br/>\r\n                </Row>\r\n                <Row>\r\n                    <span style={{ \"font-size\": \"80%\" }}><i>\r\n                        If you think this tool is useful & want to <span style={{ \"text-decoration\":\"line-through\" }}>make me rich</span> donate, or if the tool is broken,\r\n                        please click&nbsp;<a href=\"https://www.torn.com/profiles.php?XID=2575642\">here</a>\r\n                    </i></span>\r\n                </Row>\r\n            </Col>\r\n        </Container>\r\n    }\r\n}\r\n\r\nexport default FooterComponent;","import React from 'react';\nimport InitialiserComponent from './components/InitialiserComponent'\nimport ReceivedItemsComponent from './components/ReceivedItemsComponent'\nimport SentItemsComponent from './components/SentItemsComponent'\nimport SummaryDetailComponent from './components/SummaryDetailComponent'\nimport FooterComponent from './components/FooterComponent'\nimport { Container, Row, Col } from 'reactstrap';\n\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <Col><InitialiserComponent/></Col>\n      </Row>\n      <Row>\n        <Col><ReceivedItemsComponent/></Col>\n        <Col><SentItemsComponent/></Col>\n      </Row>\n      <Row>\n        <Col><SummaryDetailComponent/></Col>\n      </Row>\n      <Row>\n        <Col><FooterComponent/></Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;","export function populateDefaultPriceMap() {\r\n    if (localStorage.getItem(\"MARKET_ITEMS_SIMPLE\")) {\r\n        var itemNames = JSON.parse(localStorage.getItem(\"MARKET_ITEMS_SIMPLE\"));\r\n        var defaultPriceMap = {};\r\n        itemNames.forEach((itemName) => {\r\n            defaultPriceMap[itemName] = 0;\r\n        });\r\n        console.log(\"price map initialised successfully!\");\r\n        return defaultPriceMap;\r\n    }\r\n    else {\r\n        console.error(\"price map failed to initialise as no items metadata was found!\");\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport { IdGenerator } from './utils/IdGeneratorUtil'\nimport { populateDefaultPriceMap } from './utils/PriceMapGeneratorUtil'\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { logger } from 'redux-logger'\n\nconst mainReducer = function (\n\n  state = {\n    time: new Date(),\n    apiKey: localStorage.getItem(\"API_KEY\"),\n    received: {\n      items: [{ id: IdGenerator(), name: \"\", qty: 0, mPrice: 0, tPrice: 0 }],\n      total: 0\n    },\n    sent: {\n      items: [{ id: IdGenerator(), name: \"\", qty: 0, mPrice: 0, tPrice: 0 }],\n      total: 0\n    },\n    tradeSummary: {\n      yourName: localStorage.getItem(\"YOUR_NAME\"),\n      theirName: \"\",\n      balance: 0\n    },\n    priceMap: populateDefaultPriceMap(),\n    loading: false,\n    apiErrorMsg: \"\",\n    apiCallSuccess: undefined,\n    itemsStore: JSON.parse(localStorage.getItem(\"MARKET_ITEMS\")),\n    itemNameList: JSON.parse(localStorage.getItem(\"MARKET_ITEMS_SIMPLE\"))\n  }, action) {\n\n  switch (action.type) {\n    case \"API_KEY_UPDATED\":\n      return {\n        ...state,\n        apiKey: action.payload.apiKey,\n        time: new Date()\n      };\n    case \"YOUR_NAME_UPDATED\":\n      return {\n        ...state,\n        tradeSummary: {\n          ...state.tradeSummary,\n          yourName: action.payload.yourName\n        },\n        time: new Date()\n      };\n    case \"MARKET_PRICE_FETCHED\":\n      var updatedPriceMap = { ...state.priceMap };\n      updatedPriceMap[action.payload.itemName] = action.payload.price;\n      return {\n        ...state,\n        priceMap: updatedPriceMap,\n        time: new Date()\n      };\n    case \"UPDATE_RECEIVED_ITEMS\":\n      return {\n        ...state,\n        received: action.payload.received,\n        apiCallSuccess: undefined,\n        loading: false,\n        time: new Date()\n      };\n    case \"UPDATE_SENT_ITEMS\":\n      return {\n        ...state,\n        sent: action.payload.sent,\n        apiCallSuccess: undefined,\n        loading: false,\n        time: new Date()\n      };\n    case \"UPDATE_TRADE_SUMMARY\":\n      return {\n        ...state,\n        tradeSummary: {\n          ...state.tradeSummary,\n          balance:action.payload.summary.balance\n        },\n        time: new Date()\n      };\n    case \"MARKET_ITEMS_FETCH_STARTED\":\n      return {\n        ...state,\n        loading: action.payload.loading,\n        apiCallSuccess: undefined,\n        time: new Date()\n      };\n    case \"MARKET_ITEMS_FETCH_SUCCESS\":\n      return {\n        ...state,\n        priceMap: populateDefaultPriceMap(),\n        loading: action.payload.loading,\n        itemsStore: action.payload.itemsStore,\n        itemNameList: action.payload.itemNameList,\n        apiCallSuccess: true,\n        time: new Date()\n      };\n    case \"API_CALL_FAILED\":\n      return {\n        ...state,\n        loading: action.payload.loading,\n        apiCallSuccess: false,\n        apiErrorMsg: action.payload.error,\n        time: new Date()\n      };\n    default:\n      return state;\n  }\n};\n\nlet reduxStore;\nif (localStorage.getItem(\"debug\")) {\n  reduxStore = createStore(mainReducer, applyMiddleware(thunk, logger));\n}\nelse {\n  reduxStore = createStore(mainReducer, applyMiddleware(thunk));\n}\nconst ReactApp = () => (\n  <Provider store={reduxStore}>\n    <App />\n  </Provider>\n);\nReactDOM.render(<ReactApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}